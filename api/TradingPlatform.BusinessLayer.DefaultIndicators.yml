### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.DefaultIndicators
  commentId: T:TradingPlatform.BusinessLayer.DefaultIndicators
  id: DefaultIndicators
  parent: TradingPlatform.BusinessLayer
  children:
  - TradingPlatform.BusinessLayer.DefaultIndicators.AC
  - TradingPlatform.BusinessLayer.DefaultIndicators.ADX(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AfirmaMode,System.Boolean)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Alligator(TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.AO
  - TradingPlatform.BusinessLayer.DefaultIndicators.AROON(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.ATR(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.BB(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.BBF(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.CCI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Channel(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.CMO(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.DMI(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.EMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.ICH(System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.KAMA(System.Int32,System.Double,System.Double,System.Double,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AMATrendType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Keltner(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.KRI(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.LWMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MACD(System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MAE(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,System.Double,System.Double)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MAS3(System.Int32,System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MD(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MFI(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.MMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Momentum(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.OBV(TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.OsMA(System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.PO(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.PPMA(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.PPO(System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.PVI(TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Qstick(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Regression(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.RLW(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.ROC(System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.RSI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.RSIMode,TradingPlatform.BusinessLayer.MaMode,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.SAR(System.Double,System.Double)
  - TradingPlatform.BusinessLayer.DefaultIndicators.SD(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.SI(System.Double)
  - TradingPlatform.BusinessLayer.DefaultIndicators.SMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.SMMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode)
  - TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI(System.Int32,System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.TSI(System.Int32,System.Int32)
  - TradingPlatform.BusinessLayer.DefaultIndicators.Volume
  - TradingPlatform.BusinessLayer.DefaultIndicators.ZZ(System.Double)
  langs:
  - csharp
  - vb
  name: DefaultIndicators
  nameWithType: DefaultIndicators
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: DefaultIndicators
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 8
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: public sealed class DefaultIndicators
    content.vb: Public NotInheritable Class DefaultIndicators
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.EMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.EMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: EMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: EMA(Int32, PriceType)
  nameWithType: DefaultIndicators.EMA(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.EMA(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: EMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 110
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Exponential Moving Average (EMA) indicator.\n<p>EMA provides a weighted price calculation for the last N periods.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code> \nusing TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Exponential moving average example.\n    /// </summary>\n    public class EMA : Indicator\n    {\n        #region Parameters\n\n        // Period of moving average. \n        [InputParameter(&quot;Period of Exponential Moving Average&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 2;\n\n        // Price type of moving average. \n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[]\n        {\n        &quot;Close&quot;, PriceType.Close,\n        &quot;Open&quot;, PriceType.Open,\n        &quot;High&quot;, PriceType.High,\n        &quot;Low&quot;, PriceType.Low,\n        &quot;Typical&quot;, PriceType.Typical,\n        &quot;Median&quot;, PriceType.Median,\n        &quot;Weighted&quot;, PriceType.Weighted\n        })]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Holds EMA&apos;s smoothing values.\n        private Indicator ema;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public EMA()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;EMA&quot;;\n            Description = &quot;Exponential moving average example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;EMA&quot;, Color.DodgerBlue, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;EMA (&quot; + Period.ToString()+&quot;: &quot;+SourcePrice.ToString()+&quot;)&quot;;\n            // Creates an instance of the proper indicator (EMA) from the default indicators list.\n            ema = Core.Instance.IndicatorManager.DefaultIndicators.EMA(Period, SourcePrice);\n            // Adds an auxiliary (EMA) indicator to the current one (EMA Example). \n            // This will let inner indicator (EMA) to be calculated in advance to the current one (EMA Example).\n            AddIndicator(ema); \n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip if count is smaller than period value.\n            if (Count &lt;= Period)\n                return;\n\n            // Sets value for displaying on the chart.\n            SetValue(ema.GetValue());\n        }\n    }\n}                                                                                                                            </code></pre>\n</span>\n"
  syntax:
    content: public Indicator EMA(int maPeriod, PriceType priceType)
    parameters:
    - id: maPeriod
      type: System.Int32
      description: Period of Exponential Moving Average
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function EMA(maPeriod As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.EMA*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.LWMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.LWMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: LWMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: LWMA(Int32, PriceType)
  nameWithType: DefaultIndicators.LWMA(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.LWMA(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: LWMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 204
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Linearly Weighted Moving Average\n<p> Linear Weighted Moving Average makes the most recent bar more important unlike SMA.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using System;\nusing TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    public class TestLWMA : Indicator\n    {\n        #region Input params\n        Indicator slowLWMA, fastLWMA;\n        #endregion\n        // Input Parameter with an input field or checkbox (if bolean)\n        [InputParameter(&quot;Period slow LWMA&quot;, 0, 1, 9999)]\n        public int slowPeriod = 12;\n        [InputParameter(&quot;Period fast LWMA&quot;, 0, 1, 9999)]\n        public int fastPeriod = 8;\n        // Input Parameter with a dropdown\n        [InputParameter(&quot;Sources prices for calculation LWMA&quot;, 1, new object[] {\n                      &quot;Close&quot;, PriceType.Close,\n                      &quot;Open&quot;, PriceType.Open,\n                      &quot;High&quot;, PriceType.High,\n                      &quot;Low&quot;, PriceType.Low,\n                      &quot;Typical&quot;, PriceType.Typical,\n                      &quot;Medium&quot;, PriceType.Median,\n                      &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public TestLWMA()\n                : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;LWMA test&quot;;\n            Description = &quot;Example of using built-in LWMA indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n           AddLineSeries(&quot;TestLWMA&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n        }\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n           ShortName = &quot;LWMA (&quot;+slowPeriod.ToString()+&quot;:&quot;+fastPeriod.ToString()+&quot;)&quot;;\n           // Creation of an indicator with long period\n           slowLWMA = Core.Instance.IndicatorManager.DefaultIndicators.LWMA(slowPeriod, SourcePrice);\n           AddIndicator(slowLWMA);\n           // Creation of an indicator with short period\n           fastLWMA = Core.Instance.IndicatorManager.DefaultIndicators.LWMA(fastPeriod, SourcePrice);\n           AddIndicator(fastLWMA);\n       }\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            if (Count > Math.Max(slowPeriod, fastPeriod))\n                SetValue((slowLWMA.GetValue() + fastLWMA.GetValue()) / 2);\n        }\n    }\n}  </code></pre>        \n</span>\n"
  syntax:
    content: public Indicator LWMA(int maPeriod, PriceType priceType)
    parameters:
    - id: maPeriod
      type: System.Int32
      description: Moving average period
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of the price
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function LWMA(maPeriod As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.LWMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.SMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: SMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: SMA(Int32, PriceType)
  nameWithType: DefaultIndicators.SMA(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SMA(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: SMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 301
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the SMA(Simple Moving Average) indicator.\n<p> The &apos;SMA&apos; indicator provides an average price for the last N periods. </p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing; \n\nnamespace Example\n{\n    public class TestSMA : Indicator\n    {\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;Period of Simple Moving Average&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 2;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[]\n        {\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Median&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted\n        })]\n        public PriceType SourcePrice = PriceType.Close;\n\n        private Indicator sma;\n\n        public TestSMA()\n            : base()\n        {\n            Name = &quot;TestSMA&quot;;\n            Description = &quot;Example of using SMA indicator&quot;;\n\n            // Define one line with particular parameters.\n            AddLineSeries(&quot;Signal&quot;, Color.Green, 5, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serve for identification of related indicators with different parameters.\n            ShortName = &quot;TestMA (&quot; + Period + &quot;:&quot; + SourcePrice.ToString() + &quot;)&quot;;\n\n            // Get SMA indicator from built-in indicator collection\n            sma = Core.Instance.IndicatorManager.DefaultIndicators.SMA(Period, SourcePrice);\n\n            // Add auxiliary SMA indicator to the current.\n            AddIndicator(sma);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Checking, if current amount of bars\n            // more, than period of moving average. If it is\n            // then the calculation is possible\n            if (Count &lt;= Period)\n                return;\n\n            // Get SMA values for current and previos bars\n            var currentSmaValue = sma.GetValue(0);\n            var previousSmaValue = sma.GetValue(1);\n\n            // Set value to the &quot;Signal&quot; line buffer \n            if (previousSmaValue &lt; currentSmaValue)\n                SetValue(1);\n            else if (previousSmaValue > currentSmaValue)\n                SetValue(-1);\n            else\n                SetValue(0);\n        }\n    }\n}                                                                                                                       </code></pre>\n</span>\n"
  syntax:
    content: public Indicator SMA(int period, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Period of simple moving average.
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function SMA(period As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.SMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SMMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.SMMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: SMMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: SMMA(Int32, PriceType)
  nameWithType: DefaultIndicators.SMMA(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SMMA(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: SMMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 410
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Smoothed Moving Average (SMMA) indicator.\n<p>SMMA indicator provides a smoothed average price for the last N periods.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code> using TradingPlatform.BusinessLayer;\n using System.Drawing;\n\n namespace IndicatorExample\n {\n     /// <summary>\n     /// Smoothed Moving Average example.\n     /// </summary>\n     public class SMMA : Indicator\n     {\n         #region Parameters\n\n         // Period of moving average. \n         [InputParameter(&quot;Period of Smoothed Moving Average&quot;, 0, 1, 999, 1, 0)]\n         public int Period = 12;\n\n         // Price type of moving average.\n         [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[]\n         {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Median&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted\n         })]\n         public PriceType SourcePrice = PriceType.Close;\n\n         // Holds SMMA&apos;s smoothing values.\n         Indicator smma;\n\n         #endregion\n\n         /// <summary>\n         /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n         /// </summary>\n         public SMMA()\n              : base()\n         {\n             // Defines indicator&apos;s group, name and description.\n             Group = &quot;Custom&quot;;\n             Name = &quot;SMMA&quot;;\n             Description = &quot;Smoothed moving average example&quot;;\n\n             // Defines line on demand with particular parameters.\n             AddLineSeries(&quot;SMMA&quot;, Color.DodgerBlue, 1, LineStyle.SimpleChart);\n         }\n\n         /// <summary>\n         /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n         /// </summary>\n         public override void Init()\n         {\n             // Serves for an identification of related indicators with different parameters.\n             ShortName = &quot;SMMA (&quot; + MaPeriod.ToString() + &quot;: &quot; + SourcePrice.ToString() + &quot;)&quot;;       \n             // Creates an instance of the proper indicator (SMMA) from the default indicators list.\n             smma = Core.Instance.IndicatorManager.DefaultIndicators.SMMA(Period, SourcePrice);\n             // Adds an auxiliary (SMMA) indicator to the current one (SMMA Example). \n             // This will let inner indicator (SMMA) to be calculated in advance to the current one (SMMA Example).\n             AddIndicator(smma);\n         }\n\n         /// <summary>\n         /// Calculation entry point. This function is called when a price data updates. \n         /// Will be runing under the HistoricalBar mode during history loading. \n         /// Under NewTick during realtime. \n         /// Under NewBar if start of the new bar is required.\n         /// </summary>\n         /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n         public override void OnUpdate(UpdateArgs args)\n         {\n             // Skip if count is smaller than period value.\n             if (Count &lt;= Period)\n                 return;\n\n				// Sets value for displaying on the chart.\n             SetValue(smma.GetValue());                \n         }\n     }\n }</code></pre>\n</span>\n"
  syntax:
    content: public Indicator SMMA(int period, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Moving average period
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of the price
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function SMMA(period As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.SMMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PPMA(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.PPMA(System.Int32)
  id: PPMA(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: PPMA(Int32)
  nameWithType: DefaultIndicators.PPMA(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PPMA(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: PPMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 495
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the PPMA(Pivot Point Moving Average) indicator.\n<p> The &apos;PPMA&apos; indicator uses the pivot point calculation as the input a simple moving average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n    public class TestPPMA : Indicator\n    {\n        //Defines input parameter as input field\n        [InputParameter(&quot;Period of TestPPMA&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 2;\n\n        private Indicator ppma;\n        private Indicator ema;\n\n        public TestPPMA()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestPPMA&quot;;\n            Description = &quot;Example of using PPMA indicator&quot;;\n\n            // This example doesn&apos;t require indicator lines\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TPPMA (&quot; + Period + &quot;)&quot;;\n\n            // Create PPMA and EMA indicators from built-in indicator collection\n            ppma = Core.Instance.IndicatorManager.DefaultIndicators.PPMA(Period);\n            ema = Core.Instance.IndicatorManager.DefaultIndicators.EMA(Period, PriceType.Close);\n\n            // Add auxiliary indicators to the current.\n            AddIndicator(ppma);\n            AddIndicator(ema);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            //Skip the history. Start calculation only on the real time data.\n            if (args.Reason == UpdateReason.HistoricalBar)\n                return;\n\n            // Get EMA and PPMA values of previous bar (1 offset) from first line (line index is 0)\n            var prevEma = ema.GetValue(1);\n            var prevPPMA = ppma.GetValue(1, 1);\n\n            // Get EMA and PPMA values of current bar (0 offset) form second line (line index is 1)  \n            var currentPPMA = ppma.GetValue(0, 1);\n            var currentEma = ema.GetValue(0);\n\n            // Show the alert window with some info\n            if (prevEma &lt; prevPPMA &amp;&amp; currentEma > currentPPMA)\n                Alert(&quot;The ema crossed ppma from bottom to top&quot;);\n            else if (prevEma > prevPPMA &amp;&amp; currentEma &lt; currentPPMA)\n                Alert(&quot;The ema crossed ppma from top to bottom&quot;);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator PPMA(int period)
    parameters:
    - id: period
      type: System.Int32
      description: Period of PPMA indicator
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function PPMA(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.PPMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MAS3(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MAS3(System.Int32,System.Int32,System.Int32,System.Int32)
  id: MAS3(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MAS3(Int32, Int32, Int32, Int32)
  nameWithType: DefaultIndicators.MAS3(Int32, Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MAS3(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MAS3
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 593
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the MAS3 (3MASignal) indicator. \n<p>The &apos;MAS3&apos; indicator offers buy and sell signals according to intersections of three moving averages.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n    public class TestMAS3 : Indicator\n    {\n        //Defines input parameters as input fields\n        [InputParameter(&quot;Short Moving Average Period&quot;, 0, 1, 999, 1, 0)]\n        public int ShortMaPeriod = 5;\n\n        [InputParameter(&quot;Middle Moving Average Period&quot;, 1, 1, 999, 1, 0)]\n        public int MiddleMaPeriod = 10;\n\n        [InputParameter(&quot;Long Moving Average Period&quot;, 2, 1, 999, 1, 0)]\n        public int LongMaPeriod = 25;\n\n        [InputParameter(&quot;Amount of bars passed before opening position&quot;, 3, 1, 999, 1, 0)]\n        public int BarsInterval = 1;\n\n        private Indicator mas;\n        private double trend = 0d;\n\n        public TestMAS3()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestMAS3&quot;;\n            Description = &quot;Example of using MAS3 indicator&quot;;\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestMAS3 (&quot; + ShortMaPeriod + &quot;:&quot; + MiddleMaPeriod + &quot;:&quot; + LongMaPeriod + &quot;:&quot; + BarsInterval + &quot;)&quot;;\n\n            // Get MAS3 indicator from built-in indicator collection.\n            mas = Core.Instance.IndicatorManager.DefaultIndicators.MAS3(ShortMaPeriod, MiddleMaPeriod, LongMaPeriod, BarsInterval);\n\n            // Add auxiliary indicators to the current.\n            AddIndicator(mas);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            //Skip the history. Start calculation only on the real time data.\n            if (args.Reason == UpdateReason.HistoricalBar)\n                return;\n\n            // Get MAS3 value of current bar (0 offset by default)\n            var currentTrend = mas.GetValue();\n\n            // The service method, which according to the &apos;currentTrend&apos; value returns the trend name (as string)\n            var trendName = GetTrendNameHelper(currentTrend);\n\n            // Show the alert window, with the info about current market trend\n            if (currentTrend != trend)\n                Alert($&quot;The market trend was changed. Current trend is: &apos;{ trendName }&apos;&quot;);\n\n            trend = currentTrend;\n        }\n\n        private string GetTrendNameHelper(double trend)\n        {\n            if (trend > 0d)\n                return &quot;Up&quot;;\n            else if (trend &lt; 0d)\n                return &quot;Down&quot;;\n            else\n                return &quot;None&quot;;\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MAS3(int shortPeriod, int middlePeriod, int longPeriod, int barsInterval)
    parameters:
    - id: shortPeriod
      type: System.Int32
      description: Short moving average period.
    - id: middlePeriod
      type: System.Int32
      description: Middle moving average period.
    - id: longPeriod
      type: System.Int32
      description: Long moving average period.
    - id: barsInterval
      type: System.Int32
      description: The count of bars. The trend will be determined on this interval.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function MAS3(shortPeriod As Integer, middlePeriod As Integer, longPeriod As Integer, barsInterval As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MAS3*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: MA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MA(Int32, PriceType, MaMode)
  nameWithType: DefaultIndicators.MA(Int32, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MA(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 690
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the specific MA indicator, according to selected &apos;MaMode&apos;.\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing; \n\nnamespace Example \n{ \n    public class TestMA : Indicator \n    { \n        // Displays Input Parameter as input field. \n        [InputParameter(&quot;Period of Moving Average&quot;, 0, 1, 999, 1, 0)] \n        public int Period = 10; \n\n        // Displays Input Parameter as dropdown list. \n        [InputParameter(&quot;MA mode&quot;, 1, new object[]{ \n            &quot;Simple Moving Average&quot;, MaMode.SMA, \n            &quot;Exponential Moving Average&quot;, MaMode.EMA, \n            &quot;Smoothed Moving Average&quot;, MaMode.SMMA, \n            &quot;Linearly Weighted Moving Average&quot;, MaMode.LWMA,\n        })]\n        public MaMode MaType = MaMode.SMA;\n        [InputParameter(&quot;Sources prices for MA&quot;, 2, new object[]{\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Median&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted\n        })]\n        public PriceType SourcePrice = PriceType.Close;\n\n        private Indicator testMa;\n        private Indicator sma;\n\n        public TestMA()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestMA&quot;;\n            Description = &quot;Test of built-in MA method&quot;;\n\n            // Defines one line with particular parameters.\n            AddLineSeries(&quot;MA&quot;, Color.Green, 2, LineStyle.SimpleChart);\n        }\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TMA (&quot; + Period + &quot;:&quot; + SourcePrice.ToString() + &quot;:&quot; + MaType.ToString() + &quot;)&quot;;\n\n            // Get MA indicator from built-in indicator collection (according to selected &apos;MaType&apos;).\n            testMa = HistoricalData.DefaultIndicators.MA(Period, SourcePrice, MaType);\n\n            // Get SMA indicator from built-in indicator collection.\n            sma = HistoricalData.DefaultIndicators.SMA(Period, SourcePrice);\n        }\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.   \n            if (Count &lt;= Period)\n                return;\n\n            // Print name of &apos;testMa&apos; indicator and its value \n            // + name of &apos;sma&apos; indicator (it&apos;s always &quot;SMA&quot;) and its value  \n            // + &apos;true&apos; if their values are equal or &apos;false&apos; if it isn&apos;t. \n            Print($&quot;{testMa.Name}: {testMa.GetValue()}. \\n&quot; +\n                  $&quot;{sma.Name}: {sma.GetValue()}. \\n&quot; +\n                  $&quot;Indicator values are equal: {testMa.GetValue() == sma.GetValue()}.&quot;); \n\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MA(int period, PriceType priceType, MaMode maMode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of moving average.
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of price.
    - id: maMode
      type: TradingPlatform.BusinessLayer.MaMode
      description: MA mode.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function MA(period As Integer, priceType As PriceType, maMode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.BB(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.BB(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: BB(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: BB(Int32, Double, PriceType, MaMode)
  nameWithType: DefaultIndicators.BB(Int32, Double, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.BB(System.Int32, System.Double, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: BB
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 805
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the BB(Bollinger Bands) indicator. \n<p>The &apos;BB&apos; indicator provides a relative definition of high and low based on standard deviation and a simple moving average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestBB : Indicator\n    {\n        //Defines &apos;Period&apos; input parameters as input field and set allowable range from 1 to 999\n        [InputParameter(&quot;Period of MA for envelopes&quot;, 0, 1, 999)]\n        public int Period = 5;\n\n        //Defines &apos;Period&apos; input parameters as input field and set allowable range from 0.1 to 100.0, increment of 0.1\n        [InputParameter(&quot;Value of confidence interval&quot;, 1, 0.1, 100.0, 0.1, 1)]\n        public double D = 1.0;\n\n        //Defines input parameters as dropdown lists\n        [InputParameter(&quot;Sources prices for MA&quot;, 2, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrices = PriceType.Low;\n        [InputParameter(&quot;Type of moving average&quot;, 3, new object[]{\n             &quot;Simple Moving Average&quot;, MaMode.SMA,\n             &quot;Exponential Moving Average&quot;, MaMode.EMA,\n             &quot;Smoothed Moving Average&quot;, MaMode.SMMA,\n             &quot;Linearly Weighted Moving Average&quot;, MaMode.LWMA,\n        })]\n        public MaMode MaType = MaMode.SMA;\n\n        private Indicator bb;\n\n        public TestBB()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestBB&quot;;\n            Description = &quot;Example of using built-in BB indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Diff&quot;, Color.Red, 5, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestBB (&quot; + Period + &quot;:&quot; + D + &quot;:&quot; + SourcePrices.ToString() + &quot;:&quot; + MaType.ToString() + &quot;)&quot;;\n\n            // Get BB indicator from built-in indicator collection.\n            bb = HistoricalData.DefaultIndicators.BB(Period, D, SourcePrices, MaType);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.  \n            if (Count &lt;= Period)\n                return;\n\n            // Get BB values from zero (&quot;Upper Band&quot;) and second (&quot;Lower Band&quot;) lines.\n            var upperBand = bb.GetValue(0, 0);\n            var lowerBand = bb.GetValue(0, 2);\n\n            // Get close price\n            var closePrice = Close();\n\n            // Calculates a difference between current close price and specific &apos;BB&apos; line value.\n            var diff = 0d;\n            if (upperBand &lt; closePrice &amp;&amp; lowerBand &lt; closePrice)\n                diff = closePrice - upperBand;\n            else if (upperBand > closePrice &amp;&amp; lowerBand > closePrice)\n                diff = closePrice - lowerBand;\n\n            // Set value to &apos;Diff&apos; line buffer.\n            SetValue(diff, 0, 0);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator BB(int period, double coefficient, PriceType priceType, MaMode maMode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of MA for envelopes.
    - id: coefficient
      type: System.Double
      description: Value of confidence interval.
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA.
    - id: maMode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of moving average.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function BB(period As Integer, coefficient As Double, priceType As PriceType, maMode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.BB*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.CCI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.CCI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: CCI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: CCI(Int32, PriceType, MaMode)
  nameWithType: DefaultIndicators.CCI(Int32, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.CCI(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: CCI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 910
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Commodity Channel Index. \n<p>Measures the position of price in relation to its moving average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Indicators\n{\n   public class TestCCI : Indicator\n   {\n       #region Paramaters\n       // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n       [InputParameter(&quot;CCI Period&quot;, 0, 1, 999, 1, 0)]\n       public int Period = 14;\n       [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n       )]\n       public MaMode MAType = MaMode.SMA;\n       // Displays Input Parameter as dropdown list.\n       [InputParameter(&quot;Sources prices for MA&quot;, 0, new object[] {\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Medium&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted}\n       )]\n       public PriceType SourcePrice = PriceType.Typical;\n       #endregion Parameters\n\n       private Indicator CCI;\n       /// <summary>\n       /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n       /// </summary>\n       public TestCCI()\n           : base()\n       {\n           // Serves for an identification of related indicators with different parameters.\n           Name = &quot;TestCCI&quot;;\n           Description = &quot;Example of using built-in CCI indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n           AddLineSeries(&quot;CCI Line&quot;, Color.Red, 1, LineStyle.SimpleChart);\n       }\n       /// <summary>\n       /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n       /// </summary>\n       public override void Init()\n       {\n           ShortName = &quot;TestCCI (&quot;+Period.ToString()+&quot;)&quot;;\n           // Get &apos;CCI&apos; indicator from built-in indicator collection.\n           CCI = Core.Instance.IndicatorManager.DefaultIndicators.CCI(Period, SourcePrice, MAType);\n           AddIndicator(CCI);        \n       }\n       /// <summary>\n       /// Calculation entry point. This function is called when a price data updates. \n       /// Will be runing under the HistoricalBar mode during history loading. \n       /// Under NewTick during realtime. \n       /// Under NewBar if start of the new bar is required.\n       /// </summary>\n       /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n       public override void OnUpdate(UpdateArgs args)\n       {\n           // Skip some period for correct calculation.  \n           if (Count&lt;= Period)\n               return;\n\n           // Get values from &apos;CCI&apos; indicator lines. \n           var cciRecent = CCI.GetValue();\n           if(args.Reason != UpdateReason.NewTick&amp;&amp; cciRecent>100 &amp;&amp; cciRecent&lt;150)\n                Print(&quot;Long signal&quot;);\n           else if(args.Reason != UpdateReason.NewTick&amp;&amp; cciRecent&lt;-100 &amp;&amp;cciRecent>-150)\n                Print(&quot;Short signal&quot;);\n       }\n   }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator CCI(int maPeriod, PriceType priceType, MaMode maMode)
    parameters:
    - id: maPeriod
      type: System.Int32
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for CCI
    - id: maMode
      type: TradingPlatform.BusinessLayer.MaMode
      description: MA mode for CCI
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function CCI(maPeriod As Integer, priceType As PriceType, maMode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.CCI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: MMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MMA(Int32, PriceType)
  nameWithType: DefaultIndicators.MMA(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MMA(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1019
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Modified Moving Average (MMA) indicator.\n<p>MMA comprises a sloping factor to help it overtake with the growing or declining value of the trading price of the currency.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Modified Moving Average example.\n    /// </summary>\n    public class MMA : Indicator\n    {\n        #region Parameters\n\n        // Period of moving average. \n        [InputParameter(&quot;Period of Modified Moving Average&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 2;\n\n        // Price type of moving average. \n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[]\n        {\n        &quot;Close&quot;, PriceType.Close,\n        &quot;Open&quot;, PriceType.Open,\n        &quot;High&quot;, PriceType.High,\n        &quot;Low&quot;, PriceType.Low,\n        &quot;Typical&quot;, PriceType.Typical,\n        &quot;Median&quot;, PriceType.Median,\n        &quot;Weighted&quot;, PriceType.Weighted\n        })]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Holds MMA&apos;s smoothing values.\n        private Indicator mma;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public MMA()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;MMA&quot;;\n            Description = &quot;Modified Moving Average example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;MMA&quot;, Color.DodgerBlue, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;MMA (&quot; + Period.ToString() + &quot;: &quot;+ SourcePrice.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (MMA) from the default indicators list.\n            mma = Core.Instance.IndicatorManager.DefaultIndicators.MMA(Period, SourcePrice);\n            // Adds an auxiliary (MMA) indicator to the current one (MMA Example). \n            // This will let inner indicator (MMA) to be calculated in advance to the current one (MMA Example).\n            AddIndicator(mma);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip if count is smaller than period value.\n            if (Count &lt;= Period)\n                return;\n\n            // Sets value for displaying on the chart.\n            SetValue(mma.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MMA(int maPeriod, PriceType priceType)
    parameters:
    - id: maPeriod
      type: System.Int32
      description: Period of Modified Moving Average
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function MMA(maPeriod As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Regression(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Regression(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: Regression(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Regression(Int32, PriceType)
  nameWithType: DefaultIndicators.Regression(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Regression(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Regression
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1117
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Regression indicator\n<p>The Linear Regression Indicator plots the ending value of a Linear Regression Line for a specified number of bars; showing, statistically, where the price is expected to be.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using System;\nusing TradingPlatform.BusinessLayer;\n\nnamespace Indicators\n{\n    public class TestRegression : Indicator\n    {\n        #region Input params       \n        Indicator slowRL, fastRL;\n        ///<summary>\n        ///Input Parameter with an input field or checkbox (if bolean)\n        ///</summary>\n        [InputParameter(&quot;Period slow&quot;, 0, 1, 9999)]\n        public int Rlslow = 12;\n        [InputParameter(&quot;Period fast&quot;, 2, 1, 9999)]\n        public int Rlfast = 8;\n        /// <summary>\n        /// Input Parameter with a dropdown\n        /// </summary>\n        [InputParameter(&quot;Sources prices for calculation&quot;, 1, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n       #endregion\n       /// <summary>\n       /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n       /// </summary>\n       public TestRegression()\n                : base()\n        {\n            Name = &quot;Regression test&quot;;\n            Description = &quot;Example of using built-in Regression indicator&quot;;\n            AddLineSeries();\n        }\n       /// <summary>\n       /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n       /// </summary>\n       public override void Init()\n        {\n           ShortName = &quot;TestRegression (&quot;+Rlslow.ToString()+&quot;:&quot;+Rlfast.ToString()+&quot;)&quot;;\n           // Creation of an indicator with long period\n           slowRL = Core.Instance.IndicatorManager.DefaultIndicators.Regression(Rlslow, SourcePrice);\n           AddIndicator(slowRL);\n           // Creation of an indicator with short period\n           fastRL = Core.Instance.IndicatorManager.DefaultIndicators.Regression(Rlfast, SourcePrice);\n           AddIndicator(fastRL);\n       }\n       /// <summary>\n       /// Calculation entry point. This function is called when a price data updates. \n       /// Will be runing under the HistoricalBar mode during history loading. \n       /// Under NewTick during realtime. \n       /// Under NewBar if start of the new bar is required.\n       /// </summary>\n       /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n       public override void OnUpdate(UpdateArgs args)\n       {\n           if (Count &lt;= Math.Max(Rlslow, Rlfast))\n           return;\n\n           if (fastRL.GetValue()&lt;slowRL.GetValue())\n               Alert(&quot;Downgoing&quot;);\n           else if (fastRL.GetValue()>slowRL.GetValue()) \n               Alert(&quot;Upgoing&quot;);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Regression(int period, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Moving average period
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of the price
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function Regression(period As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Regression*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Channel(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Channel(System.Int32)
  id: Channel(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Channel(Int32)
  nameWithType: DefaultIndicators.Channel(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Channel(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Channel
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1194
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Channel (Price Channel) indicator. \n<p>The &apos;Channel&apos; indicator is based on measurement of min and max prices for the definite number of periods.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n    public class TestChannel : Indicator\n    {\n        // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n        [InputParameter(&quot;Period of MA for envelopes&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 5;\n\n        private Indicator channel;\n\n        public TestChannel()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestChannel&quot;;\n            Description = &quot;Example of using built-in Channel indicator&quot;;\n\n            // Define two lines (on main window) with particular parameters \n            AddLineSeries(&quot;Highest&quot;, Color.Red, 2, LineStyle.SimpleChart);\n            AddLineSeries(&quot;Lowest&quot;, Color.CadetBlue, 2, LineStyle.SimpleChart);\n\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestChannel (&quot; + Period + &quot;)&quot;;\n\n            // Get &apos;Channel&apos; indicator from built-in indicator collection.\n            channel = HistoricalData.DefaultIndicators.Channel(Period);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.  \n            if (Count &lt;= Period)\n                return;\n\n            // Get values from &apos;Channel&apos; indicator lines. \n            var highestValue = channel.GetValue(0, 0);\n            var lowestValue = channel.GetValue(0, 1);\n\n            // Set values to the &apos;TestChannel&apos; buffers (&apos;Highest&apos; and &apos;Lowest&apos; lines).\n            SetValue(highestValue, 0, 0);\n            SetValue(lowestValue, 0, 1);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Channel(int period)
    parameters:
    - id: period
      type: System.Int32
      description: Period of price channel
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Channel(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Channel*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AfirmaMode,System.Boolean)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AfirmaMode,System.Boolean)
  id: AFIRMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AfirmaMode,System.Boolean)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: AFIRMA(Int32, PriceType, AfirmaMode, Boolean)
  nameWithType: DefaultIndicators.AFIRMA(Int32, PriceType, AfirmaMode, Boolean)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.AfirmaMode, System.Boolean)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: AFIRMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1290
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the AFIRMA indicator\n<p> Autoregressive finite impulse response moving average. A digital filter accurately shows the price movement as powered with least square method to minimise time lag</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using System;\nusing TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Indicators\n{\n    public class TestAfirma : Indicator\n    {\n        #region Input params      \n        Indicator Afirma, Windowing;\n        ///<summary>\n        ///Input Parameter with an input field or checkbox (if bolean)\n        ///</summary>\n        [InputParameter(&quot;Window period&quot;, 0, 1, 9999)]\n        public int Period = 20;\n        /// <summary>\n        /// Input Parameter with a dropdown\n        /// </summary>\n        [InputParameter(&quot;Sources prices for calculation&quot;, 1, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n        [InputParameter(&quot;Windowing function&quot;, 2, new object[]{\n             &quot;Hanning&quot;, AfirmaMode.Hanning,\n             &quot;Hamming&quot;, AfirmaMode.Hamming,\n             &quot;Blackman&quot;, AfirmaMode.Blackman,\n             &quot;Blackman - Harris&quot;, AfirmaMode.BlackmanHarris}\n        )]\n        public AfirmaMode win = AfirmaMode.Hanning;\n        #endregion\n        public TestAfirma()\n                : base()\n        {\n            Name = &quot;Afirma GAP&quot;;\n            Description = &quot;Prints gap between Window function and least-squares method&quot;;\n            AddLineSeries(&quot;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n        }\n       /// <summary>\n       /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n       /// </summary>\n        public override void Init()\n        {\n            // Creation of an indicator Windowing MA with least-squares method overlapping (Afirma)\n            Afirma = Core.Instance.IndicatorManager.DefaultIndicators.AFIRMA(Period, SourcePrice, win, true);\n           AddIndicator(Afirma);\n            // Creation of an indicator Windowing MA\n            Windowing = Core.Instance.IndicatorManager.DefaultIndicators.AFIRMA(Period, SourcePrice, win, false);\n           AddIndicator(Windowing);\n       }\n       /// <summary>\n       /// Calculation entry point. This function is called when a price data updates. \n       /// Will be runing under the HistoricalBar mode during history loading. \n       /// Under NewTick during realtime. \n       /// Under NewBar if start of the new bar is required.\n       /// </summary>\n       /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n             if (Count &lt;= Period)\n                return;\n             var res = Math.Abs((Afirma.GetValue()-Windowing.GetValue()))/100;\n             Print(res.ToString()+&quot; %&quot;);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator AFIRMA(int period, PriceType priceType, AfirmaMode afirmaMode, bool least_squares_method)
    parameters:
    - id: period
      type: System.Int32
      description: Moving average period
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of the price
    - id: afirmaMode
      type: TradingPlatform.BusinessLayer.AfirmaMode
      description: Afirma mode
    - id: least_squares_method
      type: System.Boolean
      description: with least squares method overlapping if true
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function AFIRMA(period As Integer, priceType As PriceType, afirmaMode As AfirmaMode, least_squares_method As Boolean) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.RSI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.RSIMode,TradingPlatform.BusinessLayer.MaMode,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.RSI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.RSIMode,TradingPlatform.BusinessLayer.MaMode,System.Int32)
  id: RSI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.RSIMode,TradingPlatform.BusinessLayer.MaMode,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: RSI(Int32, PriceType, RSIMode, MaMode, Int32)
  nameWithType: DefaultIndicators.RSI(Int32, PriceType, RSIMode, MaMode, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.RSI(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.RSIMode, TradingPlatform.BusinessLayer.MaMode, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: RSI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1393
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the RSI indicator. \n<p> Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\nnamespace Example\n{\n    public class SmoothRSI : Indicator\n    {\n        #region Paramaters\n        // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n        [InputParameter(&quot;RSI Period&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 14;\n        [InputParameter(&quot;EMA Period&quot;, 0, 1, 999, 1, 0)]\n        public int emaPeriod = 10;\n        #endregion Parameters\n        // Default will be performed on Close prices\n        [InputParameter(&quot;Sources prices for the RSI line&quot;, 1, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n        // Default will be performed on Simple mode\n        [InputParameter(&quot;Mode for the RSI line&quot;, 2, new object[] {\n             &quot;Simple&quot;, RSIMode.Simple,\n             &quot;Exponential&quot;, RSIMode.Exponential}\n        )]\n        public RSIMode SourceRSI = RSIMode.Exponential;\n        private Indicator RSI;\n\n        public SmoothRSI()\n            : base()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            Name = &quot;RSItest&quot;;\n            Description = &quot;Example of using built-in RSI indicator&quot;;\n\n            AddLineSeries(&quot;Smooth RSI line&quot;, Color.CadetBlue, 2, LineStyle.SimpleChart);\n        }\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public override void Init()\n        {\n            ShortName = &quot;Smooth RSI (&quot;+emaPeriod.ToString()+&quot;)&quot;;\n            // Get &apos;RSI&apos; indicator from built-in indicator collection.\n            RSI = Core.Instance.IndicatorManager.DefaultIndicators.RSI(Period, SourcePrice, SourceRSI);\n            AddIndicator(RSI);\n        }\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.  \n            if (Count &lt;= Period)\n                return;\n\n            // Get MA values from &apos;RSI&apos; indicator lines. \n            var rsiValue = RSI.GetValue(0, 1);\n\n            // Set values to the &apos;SmoothRSI&apos; buffers.\n            SetValue(rsiValue);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator RSI(int period, PriceType priceType, RSIMode rsiMode, MaMode maMode, int maperiod)
    parameters:
    - id: period
      type: System.Int32
      description: RSI Period
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Price Type
    - id: rsiMode
      type: TradingPlatform.BusinessLayer.RSIMode
      description: RSI Mode (Simple or Exponential)
    - id: maMode
      type: TradingPlatform.BusinessLayer.MaMode
    - id: maperiod
      type: System.Int32
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function RSI(period As Integer, priceType As PriceType, rsiMode As RSIMode, maMode As MaMode, maperiod As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.RSI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MD(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MD(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: MD(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MD(Int32, Int32, PriceType)
  nameWithType: DefaultIndicators.MD(Int32, Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MD(System.Int32, System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MD
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1509
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the McGinley Dynamic indicator.\n<p>McGinley Dynamic avoids of most whipsaws and it rapidly moves up or down according to a quickly changing market. It needs no adjusting because it is dynamic and it adjusts itself.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// McGinley Dynamic example.\n    /// </summary>\n    public class MD : Indicator\n    {\n        #region Parameters\n\n        // Period of McGinley Dynamic. \n        [InputParameter(&quot;Period&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 2;\n\n        // Smoothing of McGinley Dynamic. \n        [InputParameter(&quot;Smoothing&quot;, 1, 1, 999, 1, 0)]\n        public int Smoothing = 2;\n\n        // Price type of McGinley Dynamic. \n        [InputParameter(&quot;Source price&quot;, 2, new object[]\n        {\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Median&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted\n        })]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Holds MD&apos;s smoothing values.\n        private Indicator md;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public MD()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;MD&quot;;\n            Description = &quot;McGinley Dynamic example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;MD&quot;, Color.DodgerBlue, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;MD (&quot; + Period.ToString() + &quot;: &quot; + Smoothing.ToString() + &quot;: &quot; + SourcePrice.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator from the default indicators list.\n            md = Core.Instance.IndicatorManager.DefaultIndicators.MD(Period, Smoothing, SourcePrice);\n            // Adds an auxiliary (MD) indicator to the current one (MD). \n            // This will let inner indicator (MD) to be calculated in advance to the current one (MD).\n            AddIndicator(md);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip if count is smaller than period value.\n            if (Count &lt;= Period)\n                return;\n\n            // Sets value for displaying on the chart.\n            SetValue(md.GetValue());                \n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MD(int period, int trackingFactor, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Period of exponential moving average
    - id: trackingFactor
      type: System.Int32
      description: Dynamic tracking factor
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Source price type
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function MD(period As Integer, trackingFactor As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MD*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MAE(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,System.Double,System.Double)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MAE(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,System.Double,System.Double)
  id: MAE(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,System.Double,System.Double)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MAE(Int32, PriceType, MaMode, Double, Double)
  nameWithType: DefaultIndicators.MAE(Int32, PriceType, MaMode, Double, Double)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MAE(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MAE
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1615
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the MAE (Moving Average Envelope) indicator.\n<p> The &apos;MAE&apos; indicator demonstrates a range of the prices discrepancy from a Moving Average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n    public class TestMAE : Indicator\n    {\n        // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n        [InputParameter(&quot;Period of MA for envelopes&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 5;\n\n        // Defines the &apos;SourcePrice&apos; parameter as dropdown list\n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Low;\n\n        // Defines the &apos;MaType&apos; parameter as dropdown list\n        [InputParameter(&quot;Type of moving average&quot;, 2, new object[]{\n             &quot;Simple Moving Average&quot;, MaMode.SMA,\n             &quot;Exponential Moving Average&quot;, MaMode.EMA,\n             &quot;Smoothed Moving Average&quot;, MaMode.SMMA,\n             &quot;Linearly Weighted Moving Average&quot;, MaMode.LWMA,\n        })]\n        public MaMode MaType = MaMode.SMA;\n\n        // Defines the &apos;UpShift&apos; parameter as input field (where &apos;min&apos; is 0.1, &apos;max&apos; is 1.0 and &apos;increment&apos; is 0.1).\n        [InputParameter(&quot;Upband deviation in %&quot;, 3, 0.1, 1.0, 0.1, 1)]\n        public double UpShift = 0.1;\n\n        // Defines the &apos;DownShift&apos; parameter as input field (where &apos;min&apos; is 0.1, &apos;max&apos; is 1.0 and &apos;increment&apos; is 0.1).\n        [InputParameter(&quot;Downband deviation in %&quot;, 4, 0.1, 1.0, 0.1, 1)]\n        public double DownShift = 0.1;\n\n        private Indicator mae;\n\n        public TestMAE()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;TestMAE&quot;;\n            Description = &quot;Example of using built-in MAE indicator&quot;;\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestMAE (&quot; + Period + &quot;:&quot; + UpShift + &quot;:&quot; + DownShift + &quot;)&quot;;\n\n            // Get MAE indicator from built-in indicator collection.\n            mae = HistoricalData.DefaultIndicators.MAE(Period, SourcePrice, MaType, UpShift, DownShift);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip the history. Start calculation only on real-time data (newBar/newTick).\n            if (args.Reason == UpdateReason.HistoricalBar)\n                return;\n\n            // Get current close price (0 offset by default) \n            var closePrice = Close();\n\n            // Show the alert window with some info.\n            if (closePrice > mae.GetValue(0, 0))\n                Alert($&quot;The current close price is higher than &apos;Upper Band&apos; line of MAE indicator&quot;);\n            else if (closePrice &lt; mae.GetValue(0, 1))\n                Alert($&quot;The current close price is lower than &apos;Lower Band&apos; line of MAE indicator&quot;);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MAE(int period, PriceType priceType, MaMode maMode, double upShift, double downShift)
    parameters:
    - id: period
      type: System.Int32
      description: Period of MA for envelopes.
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA.
    - id: maMode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of moving average.
    - id: upShift
      type: System.Double
      description: Upband deviation in %.
    - id: downShift
      type: System.Double
      description: Downband deviation in %.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function MAE(period As Integer, priceType As PriceType, maMode As MaMode, upShift As Double, downShift As Double) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MAE*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SAR(System.Double,System.Double)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.SAR(System.Double,System.Double)
  id: SAR(System.Double,System.Double)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: SAR(Double, Double)
  nameWithType: DefaultIndicators.SAR(Double, Double)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SAR(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: SAR
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1713
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Parabolic Time/Price System (SAR) indicator.\n<p>SAR indicator helps to define the direction of the prevailing trend and the moment to close positions opened during the reversal.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Parabolic Time/Price System example.\n    /// </summary>\n    public class SAR : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Step of parabolic SAR system&quot;, 0, 2)]\n        public double Step = 0.02;\n\n        [InputParameter(&quot;Maximum value for the acceleration factor&quot;, 1, 1)]\n        public double Maximum = 0.2;\n\n        // Holds SAR&apos;s smoothing values.\n        private Indicator sar;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public SAR()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;SAR&quot;;\n            Description = &quot;Parabolic Time/Price System example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;SAR&quot;, Color.Firebrick, 4, LineStyle.DotChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;SAR (&quot; + Step.ToString() + &quot;: &quot; + Maximum.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (SAR) from the default indicators list.\n            sar = Core.Instance.IndicatorManager.DefaultIndicators.SAR(Step, Maximum);\n            // Adds an auxiliary (SAR) indicator to the current one (SAR Example). \n            // This will let inner indicator (SAR) to be calculated in advance to the current one (SAR Example).\n            AddIndicator(sar);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(sar.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator SAR(double step, double maximum)
    parameters:
    - id: step
      type: System.Double
      description: Step of parabolic SAR system
    - id: maximum
      type: System.Double
      description: Maximum value for the acceleration factor
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function SAR(step As Double, maximum As Double) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.SAR*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AO
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.AO
  id: AO
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: AO()
  nameWithType: DefaultIndicators.AO()
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AO()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: AO
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1783
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the AO (Awesome Oscillator) indicator.\n<p> The &apos;AO&apos; indicator determines market momentum.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestAO : Indicator\n    {\n        private Indicator ao;\n\n        public TestAO()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;Test AO&quot;;\n            Description = &quot;Example of using built-in AO indicator&quot;;\n\n            // Define two lines (on sub window) with particular parameters \n            AddLineSeries(&quot;AO&quot;, Color.Gray, 3, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestAO&quot;;\n\n            // Get &apos;AO&apos; indicator from built-in indicator collection.\n            ao = HistoricalData.DefaultIndicators.AO();\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Get AO indicator value.\n            var aoValue = ao.GetValue();\n\n            // The AO has fixed periods (9 and 34) in own calculation. \n            // We check, if &apos;aoValue&apos; is &apos;NaN&apos; (That&apos;s mean, at this moment, the &apos;Count&apos; isn&apos;t enough for correct calculation of AO)\n            // then we skip our logic below.\n            if (aoValue == double.NaN)\n                return;\n\n            // Set values to &apos;AO&apos; line buffer.\n            SetValue(aoValue);\n\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator AO()
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function AO As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.AO*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.CMO(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.CMO(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: CMO(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: CMO(Int32, PriceType)
  nameWithType: DefaultIndicators.CMO(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.CMO(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: CMO
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1877
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the CMO (Chande Momentum Oscillator) indicator.\n<p>The CMO calculates the dividing of difference between the sum of all recent gains and the sum of all recent losses by the sum of all price movement over the period.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n    public class TestCMO : Indicator\n    {\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;Period of MA for envelopes&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 8;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[] {\n         &quot;Close&quot;, PriceType.Close,\n         &quot;Open&quot;, PriceType.Open,\n         &quot;High&quot;, PriceType.High,\n         &quot;Low&quot;, PriceType.Low,\n         &quot;Typical&quot;, PriceType.Typical,\n         &quot;Medium&quot;, PriceType.Median,\n         &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        private Indicator cmo;\n\n        private LineLevel upLevel;\n        private LineLevel downLevel;\n\n        public TestCMO()\n            : base()\n        {   \n            // Defines indicator&apos;s name and description.\n            Name = &quot;Test CMO&quot;;\n            Description = &quot;Example of using built-in CMO indicator&quot;;\n        }\n\n        public override void Init()\n        {\n            /// Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestCMO (&quot; + Period + &quot;:&quot; + SourcePrice + &quot;)&quot;;\n\n            // Get &apos;CMO&apos; indicator from built-in indicator collection.\n            cmo = HistoricalData.DefaultIndicators.CMO(Period, SourcePrice);\n\n            // Get &apos;CMO&apos; levels, if indicator was created. \n            if (cmo != null)\n            {\n                upLevel = cmo.LinesLevels[0];\n                downLevel = cmo.LinesLevels[1];\n            }\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Call the calculation below, only on HistoricalBar of NewBar.\n            if (args.Reason == UpdateReason.NewTick)\n                return;\n\n            // Check if we got &apos;CMO&apos; levels.\n            if (upLevel == null &amp;&amp; downLevel == null)\n                return;\n\n            // Get current &apos;CMO&apos; value.\n            var cmoValue = cmo.GetValue();\n\n            // Show an alert window with some info.\n            if (cmoValue > upLevel.Level)\n                Alert($&quot;{Name}. The CMO value is higher than {upLevel.Name} level.&quot;);\n            else if (cmoValue &lt; downLevel.Level)\n                Alert($&quot;{Name}. The CMO value is lower than {downLevel.Name} level.&quot;);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator CMO(int period, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Period of MA for envelopes.
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function CMO(period As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.CMO*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ZZ(System.Double)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.ZZ(System.Double)
  id: ZZ(System.Double)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: ZZ(Double)
  nameWithType: DefaultIndicators.ZZ(Double)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ZZ(System.Double)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: ZZ
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 1968
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the ZigZag indicator.\n<p>ZigZag is a trend following indicator that is used to predict when a given instrument&apos;s momentum is reversing.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// ZigZag example.\n    /// </summary>\n    public class ZZ : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Percent Deviation&quot;, 0, 0.01, 1.5, 0.01, 2)]\n        public double deviation = 1;\n\n        // Holds ZigZag&apos;s smoothing values.\n        private Indicator zz;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public ZZ()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;ZigZag&quot;;\n            Description = &quot;ZigZag example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;ZZ&apos;Line&quot;, Color.DarkOrange, 2, LineStyle.DotChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;ZZ (&quot; + deviation.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (ZZ) from the default indicators list.\n            zz = Core.Instance.IndicatorManager.DefaultIndicators.ZZ(deviation);\n            // Adds an auxiliary (ZZ) indicator to the current one (ZZ Example). \n            // This will let inner indicator (ZZ) to be calculated in advance to the current one (ZZ Example).\n            AddIndicator(zz);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(zz.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator ZZ(double deviation)
    parameters:
    - id: deviation
      type: System.Double
      description: Percent Deviation
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function ZZ(deviation As Double) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.ZZ*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AROON(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.AROON(System.Int32)
  id: AROON(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: AROON(Int32)
  nameWithType: DefaultIndicators.AROON(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AROON(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: AROON
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2053
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Aroon indicator. \n<p>Reveals the beginning of a new trend and determines how strong it is</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class AroonTest : Indicator\n    {\n        #region Paramaters\n        // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n        [InputParameter(&quot;Aroon Period&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 14;\n        #endregion Parameters\n\n        private Indicator Aroon;\n\n        public AroonTest()\n            : base()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            Name = &quot;AroonTest&quot;;\n            Description = &quot;Example of using built-in Aroon indicator&quot;;\n\n            // Define two lines (on main window) with particular parameters \n            AddLineSeries(&quot;Up line&quot;, Color.Red, 2, LineStyle.SimpleChart);\n            AddLineSeries(&quot;Down line&quot;, Color.CadetBlue, 2, LineStyle.SimpleChart);\n        }\n        /// <summary>\n        ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n        ///</summary>\n        public override void Init()\n        {  \n            ShortName = &quot;Arron (&quot;+Period.ToString()+&quot;)&quot;;\n            // Get &apos;Arron&apos; indicator from built-in indicator collection.\n            Aroon = Core.Instance.IndicatorManager.DefaultIndicators.AROON(Period);\n            AddIndicator(Aroon);\n        }\n        ///  <summary>\n        ///  Calculation entry point. This function is called when a price data updates. \n        ///  Will be runing under the HistoricalBar mode during history loading. \n        ///  Under NewTick during realtime. \n        ///  Under NewBar if start of the new bar is required.\n        ///  </summary>\n        ///  <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.  \n            if (Count&lt;=Period)\n                return;\n\n            // Get values from &apos;Aroon&apos; indicator lines. \n            var highestValue = Aroon.GetValue(0, 0);\n            var lowestValue = Aroon.GetValue(0, 1);\n\n            // Set values to the &apos;AroonTest&apos; buffers (&apos;Highest&apos; and &apos;Lowest&apos; lines).\n            SetValue(highestValue, 0, 0);\n            SetValue(lowestValue, 0, 1);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator AROON(int period)
    parameters:
    - id: period
      type: System.Int32
      description: Aroons period
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function AROON(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.AROON*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SD(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.SD(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: SD(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: SD(Int32, PriceType, MaMode)
  nameWithType: DefaultIndicators.SD(Int32, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SD(System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: SD
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2165
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Standart Deviation (SD) indicator.\n<p>The SD shows the difference of the volatility value from the average one.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Standard Deviation example.\n    /// </summary>\n    public class SD : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Sources prices for MA&quot;, 0, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n             &quot;Simple&quot;, MaMode.SMA,\n             &quot;Exponential&quot;, MaMode.EMA,\n             &quot;Modified&quot;, MaMode.SMMA,\n             &quot;Linear Weighted&quot;, MaMode.LWMA}\n        )]\n        public MaMode MAType = MaMode.SMA;\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period&quot;, 2, 1, 999, 1, 0)]\n        public int Period = 20;\n\n        // Holds SD&apos;s smoothing values.\n        private Indicator sd;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public SD()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Standard Deviation&quot;;\n            Description = &quot;Standard Deviation example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;SD&apos;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;SD (&quot; + Period.ToString() + &quot;: &quot; + SourcePrice.ToString() + &quot;: &quot; + MAType.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (SD) from the default indicators list.\n            sd = Core.Instance.IndicatorManager.DefaultIndicators.SD(Period, SourcePrice, MAType);\n            // Adds an auxiliary (SD) indicator to the current one (SD Example). \n            // This will let inner indicator (SD) to be calculated in advance to the current one (SD Example).\n            AddIndicator(sd);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(sd.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator SD(int period, PriceType priceType, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of indicator
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function SD(period As Integer, priceType As PriceType, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.SD*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MACD(System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MACD(System.Int32,System.Int32,System.Int32)
  id: MACD(System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MACD(Int32, Int32, Int32)
  nameWithType: DefaultIndicators.MACD(Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MACD(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MACD
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2254
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the MACD (Moving Average Convergence/Divergence) indicator.     \n<p> The MACD is a trend-following momentum indicator that shows the relationship between two moving averages of prices.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Linq;\n\nnamespace Example\n    {\n        public class TestMACD : Indicator\n        {\n            // Display input parameters as input fields.\n            [InputParameter(&quot;Period of fast EMA&quot;, 0, 1, 999, 1, 0)]\n            public int FastPeriod = 12;\n\n            [InputParameter(&quot;Period of slow EMA&quot;, 1, 1, 999, 1, 0)]\n            public int SlowPeriod = 26;\n\n            [InputParameter(&quot;Period of signal EMA&quot;, 2, 1, 999, 1, 0)]\n            public int SignalPeriod = 9;\n\n            private int maxPeriod;\n            private Indicator macd;\n\n            public TestMACD()\n                : base()\n            {\n                // Defines indicator&apos;s name and description.\n                Name = &quot;Test MACD&quot;;\n                Description = &quot;Example of using built-in MACD indicator&quot;;\n            }\n\n            public override void Init()\n            {\n                // Serves for an identification of related indicators with different parameters.\n                ShortName = &quot;TestMACD (&quot; + FastPeriod + &quot;:&quot; + SlowPeriod + &quot;:&quot; + SignalPeriod + &quot;)&quot;;\n\n                // Find the max period.\n                maxPeriod = Enumerable.Max(new int[] { FastPeriod, SlowPeriod, SignalPeriod });\n\n                // Get MACD indicator from built-in indicator collection and add it to the current one as auxiliary.\n                macd = Core.Instance.IndicatorManager.DefaultIndicators.MACD(FastPeriod, SlowPeriod, SignalPeriod);\n                AddIndicator(macd);\n            }\n\n            public override void OnUpdate(UpdateArgs args)\n            {                       \n                // Skip the history. Start calculation only on real-time data (newBar/newTick).\n                if (args.Reason == UpdateReason.HistoricalBar)\n                    return;    \n\n                // Get the current and previoud signal line values of MACD indicator (1 line index).\n                var currSignal = macd.GetValue(0, 1);\n                var prevSignal = macd.GetValue(1, 1);\n\n                // Show an alert window with some info.\n                if (prevSignal &lt; 0d &amp;&amp; currSignal > 0d)\n                    Alert(&quot;The &apos;Signal&apos; line crosses of zero line from bottom to top.&quot;);\n                else if (prevSignal > 0d &amp;&amp; currSignal &lt; 0d)\n                    Alert(&quot;The &apos;Signal&apos; line crosses of zero line from top to bottom.&quot;);\n            }\n        }\n    }</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MACD(int fastEMA, int slowEMA, int signalEMA)
    parameters:
    - id: fastEMA
      type: System.Int32
      description: Period of fast EMA.
    - id: slowEMA
      type: System.Int32
      description: Period of slow EMA.
    - id: signalEMA
      type: System.Int32
      description: Period of signal EMA.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function MACD(fastEMA As Integer, slowEMA As Integer, signalEMA As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MACD*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.KRI(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.KRI(System.Int32)
  id: KRI(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: KRI(Int32)
  nameWithType: DefaultIndicators.KRI(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.KRI(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: KRI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2348
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Kairi Relative Index (KRI) indicator.\n<p>KRI calculates deviation of the current price from its simple moving average as a percent of the moving average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Kairi Relative Index example.\n    /// </summary>\n    public class KRI : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period&quot;, 2, 1, 999, 1, 0)]\n        public int Period = 20;\n\n        // Holds KRI&apos;s values.\n        private Indicator kri;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public KRI()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Kairi Relative Index&quot;;\n            Description = &quot;Kairi Relative Index example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;SD&apos;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n            AddLineLevel(0, &quot;0&apos;Line&quot;, Color.Gray, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;KRI (&quot; + Period.ToString() + &quot;)&quot;;       \n            // Creates an instance of the proper indicator (KRI) from the default indicators list.\n            kri = Core.Instance.IndicatorManager.DefaultIndicators.KRI(Period);\n            // Adds an auxiliary (KRI) indicator to the current one (KRI Example). \n            // This will let inner indicator (KRI) to be calculated in advance to the current one (KRI Example).\n            AddIndicator(kri);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(kri.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator KRI(int period)
    parameters:
    - id: period
      type: System.Int32
      description: ''
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function KRI(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.KRI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.BBF(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.BBF(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: BBF(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: BBF(Int32, Double, PriceType, MaMode)
  nameWithType: DefaultIndicators.BBF(Int32, Double, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.BBF(System.Int32, System.Double, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: BBF
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2472
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Bollinger Bands Flat (BBF) indicator.\n<p>The BBF provides the same data as BB, but drawn in separate field and easier to recognize whether price is in or out of the band.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Bollinger Bands Flat example.\n    /// </summary>\n    public class BBF : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 9;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n             &quot;Simple&quot;, MaMode.SMA,\n             &quot;Exponential&quot;, MaMode.EMA,\n             &quot;Modified&quot;, MaMode.SMMA,\n             &quot;Linear Weighted&quot;, MaMode.LWMA}\n        )]\n        public MaMode MAType = MaMode.SMA;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Sources prices for MA&quot;, 2, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Deviation&quot;, 3, 0.01, 3, 0.01, 2)]\n        public double Deviation = 1.5;\n\n        // Holds BBF&apos;s values.\n        private Indicator bbf;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public BBF()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Bollinger Bands Flat&quot;;\n            Description = &quot;Bollinger Bands Flat example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;+SD&quot;, Color.Red, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;-SD&quot;, Color.Red, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;BBF&apos;Line&quot;, Color.FromArgb(0, 51, 252), 1, LineStyle.SimpleChart);\n            AddLineLevel(0, &quot;0&apos;Line&quot;, Color.Aqua, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;BBF (&quot; + Period.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (BBF) from the default indicators list.\n            bbf = Core.Instance.IndicatorManager.DefaultIndicators.BBF(Period, Deviation, SourcePrice, MAType);\n            // Adds an auxiliary (BBF) indicator to the current one (BBF Example). \n            // This will let inner indicator (BBF) to be calculated in advance to the current one (BBF Example).\n            AddIndicator(bbf);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets relevant values for displaying on the chart.\n            for (int i = 0; i &lt; bbf.LinesSeries.Length; i++)\n            {\n                SetValue(bbf.GetValue(0,i),0,i);\n            }\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator BBF(int period, double deviation, PriceType priceType, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period
    - id: deviation
      type: System.Double
      description: Deviation
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function BBF(period As Integer, deviation As Double, priceType As PriceType, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.BBF*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ROC(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.ROC(System.Int32)
  id: ROC(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: ROC(Int32)
  nameWithType: DefaultIndicators.ROC(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ROC(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: ROC
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2569
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the ROC (Rate of Change) indicator.    \n<p>The ROC shows the speed at which price is changing.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestROC : Indicator\n    {\n        // Displays &apos;Period&apos; input parameter as input field.\n        [InputParameter(&quot;Period of momentum&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 20;\n\n        private Indicator roc;\n        private LineLevel zeroLevel;\n\n        public TestROC()\n            : base()\n        {\n            // Serves for an identification of related indicators.\n            Name = &quot;Test ROC&quot;;\n            Description = &quot;Example of using built-in ROC indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Signal&quot;, Color.DodgerBlue, 5, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestROC (&quot; + Period + &quot;)&quot;;\n\n            // Get ROC indicator from built-in indicator collection \n            roc = Core.Instance.IndicatorManager.DefaultIndicators.ROC(Period);\n\n            // Get an instance of level line from ROC indicator.\n            zeroLevel = roc.LinesLevels[0];\n\n            // Attach the &apos;ROC&apos; indicator to the current &apos;TestROC&apos;.\n            AddIndicator(roc);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.\n            if (Count &lt;= Period)\n                return;\n\n            // Start the calculation only on HistoricalBar or NewBar.\n            if (args.Reason == UpdateReason.NewTick)\n                return;\n\n            // Get current and previous values of ROC indicator.\n            var currROC = roc.GetValue(0);\n            var prevROC = roc.GetValue(1);\n\n            // Assign 0 to a signal variable by default .  \n            var signal = 0;\n\n            // Change the signal value if the crossing of &apos;ROC&apos; indicator with zero level was happened. \n            if (currROC > zeroLevel.Level &amp;&amp; prevROC &lt; zeroLevel.Level)\n                signal = 1;\n            else if (currROC &lt; zeroLevel.Level &amp;&amp; prevROC > zeroLevel.Level)\n                signal = -1;\n\n            // Set signal value to a &apos;Signal&apos; line buffer. \n            SetValue(signal);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator ROC(int period)
    parameters:
    - id: period
      type: System.Int32
      description: Period of momentum.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function ROC(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.ROC*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Momentum(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Momentum(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  id: Momentum(System.Int32,TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Momentum(Int32, PriceType)
  nameWithType: DefaultIndicators.Momentum(Int32, PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Momentum(System.Int32, TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Momentum
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2655
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Momentum indicator. \n<p>Momentum compares where the current price is in relation to where the price was in the past.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\nnamespace Example\n{\n   public class TestMomentum : Indicator\n   {\n       #region Paramaters\n       // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n       [InputParameter(&quot;Momentum Period&quot;, 0, 1, 999, 1, 0)]\n       public int Period = 20;\n       #endregion Parameters\n\n       private Indicator Momentum;\n      ///<summary>\n      ///Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n      ///</summary>\n       public TestMomentum()\n           : base()\n       {\n           // Serves for an identification of related indicators with different parameters.\n           Name = &quot;TestMomentum&quot;;\n           Description = &quot;Example of using built-in Momentum indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n           AddLineSeries(&quot;Signal&quot;, Color.DodgerBlue, 5, LineStyle.HistogrammChart);\n       }\n      /// <summary>\n      ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n      ///</summary>\n       public override void Init()\n       {\n           ShortName = &quot;Momentum (&quot;+Period.ToString()+&quot;)&quot;;\n           // Get &apos;Momentum&apos; indicator from built-in indicator collection.\n           Momentum = Core.Instance.IndicatorManager.DefaultIndicators.Momentum(Period,PriceType.Close);\n           AddIndicator(Momentum);\n       }\n      /// <summary>\n      /// Calculation entry point. This function is called when a price data updates. \n      /// Will be runing under the HistoricalBar mode during history loading. \n      /// Under NewTick during realtime. \n      /// Under NewBar if start of the new bar is required.\n      /// </summary>\n      /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n       public override void OnUpdate(UpdateArgs args)\n       {\n           // Skip some period for correct calculation.  \n           if (Count&lt;= Period)\n               return;\n\n           // Get values from &apos;Momentum&apos; indicator lines. \n           var MomentumNew = Momentum.GetValue();\n           if(MomentumNew>0)\n                Print(&quot;Upward movement&quot;);\n           else\n                Print(&quot;Downward movement&quot;);\n       }\n   }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Momentum(int period, PriceType priceType)
    parameters:
    - id: period
      type: System.Int32
      description: Period for Momentum
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for Momentum
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Momentum(period As Integer, priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Momentum*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.RLW(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.RLW(System.Int32)
  id: RLW(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: RLW(Int32)
  nameWithType: DefaultIndicators.RLW(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.RLW(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: RLW
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2742
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: public Indicator RLW(int period)
    parameters:
    - id: period
      type: System.Int32
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function RLW(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.RLW*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PO(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.PO(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: PO(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: PO(Int32, Int32, PriceType, MaMode)
  nameWithType: DefaultIndicators.PO(Int32, Int32, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PO(System.Int32, System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: PO
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2859
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Price Oscillator (PO) indicator.\n<p>PO calculates the variation between price moving averages.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Price Oscillator example.\n    /// </summary>\n    public class PO : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Type of Moving Average&quot;, 0, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n        )]\n        public MaMode MAType = MaMode.SMA;\n\n        [InputParameter(&quot;Sources prices for MA&quot;, 1, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period of MA1&quot;, 2)]\n        public int MAPeriod1 = 2;\n\n        [InputParameter(&quot;Period of MA2&quot;, 3)]\n        public int MAPeriod2 = 25;\n\n        // Holds PO&apos;s values.\n        private Indicator po;\n\n        #endregion\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public PO()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Price Oscillator&quot;;\n            Description = &quot;Price Oscillator example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;PO&apos;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n            AddLineLevel(0, &quot;0&apos;Line&quot;, Color.Gray, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;PO (&quot; + MAPeriod1.ToString() + &quot;: &quot; + MAPeriod2.ToString() + &quot;: &quot; + SourcePrice.ToString() + &quot;: &quot; + MAType.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (PO) from the default indicators list.\n            po = Core.Instance.IndicatorManager.DefaultIndicators.PO(MAPeriod1, MAPeriod2, SourcePrice, MAType);\n            // Adds an auxiliary (PO) indicator to the current one (PO Example). \n            // This will let inner indicator (PO) to be calculated in advance to the current one (PO Example).\n            AddIndicator(po);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(po.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator PO(int period1, int period2, PriceType priceType, MaMode mode)
    parameters:
    - id: period1
      type: System.Int32
      description: Period of MA1
    - id: period2
      type: System.Int32
      description: Period of MA2
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function PO(period1 As Integer, period2 As Integer, priceType As PriceType, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.PO*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.OsMA(System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.OsMA(System.Int32,System.Int32,System.Int32)
  id: OsMA(System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: OsMA(Int32, Int32, Int32)
  nameWithType: DefaultIndicators.OsMA(Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.OsMA(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: OsMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 2949
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the OsMA (Moving Average of Oscillator) indicator.     \n<p> The OsMA reflects the difference between an oscillator (MACD) and its moving average (signal line).</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\nusing System.Linq;\n\nnamespace Example\n{\n    public class TestOsMA : Indicator\n    {\n        // Display input parameters as input fields.\n        [InputParameter(&quot;Period of fast EMA&quot;, 0, 1, 999, 1, 0)]\n        public int FastPeriod = 12;\n\n        [InputParameter(&quot;Period of slow EMA&quot;, 1, 1, 999, 1, 0)]\n        public int SlowPeriod = 26;\n\n        [InputParameter(&quot;Period of signal EMA&quot;, 2, 1, 999, 1, 0)]\n        public int SignalPeriod = 9;\n\n        private int maxPeriod;\n        private Indicator osma;\n\n        public TestOsMA()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;Test OsMA&quot;;\n            Description = &quot;Example of using built-in OsMA indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;OsMA&quot;, Color.Orange, 4, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestOsMA (&quot; + FastPeriod + &quot;:&quot; + SlowPeriod + &quot;:&quot; + SignalPeriod + &quot;)&quot;;\n\n            // Find the max period.\n            maxPeriod = Enumerable.Max(new int[] { FastPeriod, SlowPeriod, SignalPeriod });\n\n            // Get OsMA indicator from built-in indicator collection and add it to the current one as auxiliary.\n            osma = Core.Instance.IndicatorManager.DefaultIndicators.OsMA(FastPeriod, SlowPeriod, SignalPeriod);\n            AddIndicator(osma);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip max period for correct calculation.  \n            if (Count &lt;= maxPeriod)\n                return;\n\n            // Get value from OsMA indicator.\n            var value = osma.GetValue(0, 0);\n\n            // Set value to the &apos;OsMA&apos; line buffer. \n            SetValue(value);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator OsMA(int fastEMA, int slowEMA, int signalEMA)
    parameters:
    - id: fastEMA
      type: System.Int32
      description: Period of fast EMA.
    - id: slowEMA
      type: System.Int32
      description: Period of slow EMA.
    - id: signalEMA
      type: System.Int32
      description: Period of signal EMA.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function OsMA(fastEMA As Integer, slowEMA As Integer, signalEMA As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.OsMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.OBV(TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.OBV(TradingPlatform.BusinessLayer.PriceType)
  id: OBV(TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: OBV(PriceType)
  nameWithType: DefaultIndicators.OBV(PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.OBV(TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: OBV
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3031
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets On Balance Volume. \n<p>On Balance Volume (OBV) measures buying and selling pressure as a cumulative indicator that adds volume on up days and subtracts volume on down days.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n   public class TestOBV : Indicator\n   {\n       #region Paramaters\n        // Displays Input Parameter as dropdown list.\n       [InputParameter(&quot;Sources prices for OBV&quot;, 1, new object[] {\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Medium&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted}\n       )]\n       public PriceType SourcePrice = PriceType.Close;\n       #endregion Parameters\n\n       private Indicator OBV;\n\n       public TestOBV()\n           : base()\n       {\n           // Serves for an identification of related indicators with different parameters.\n           Name = &quot;TestOBV&quot;;\n           Description = &quot;Example of using built-in OBV indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n           AddLineSeries();\n       }\n       public override void Init()\n       {\n           ShortName = &quot;OBV (&quot;+SourcePrice.ToString()+&quot;)&quot;;\n           // Get &apos;OBV&apos; indicator from built-in indicator collection.\n           OBV = Core.Instance.IndicatorManager.DefaultIndicators.OBV(SourcePrice);\n           AddIndicator(OBV);\n       }\n\n       public override void OnUpdate(UpdateArgs args)\n       {\n           // Skip some period for correct calculation.  \n           if (Count &lt;= 1)\n               return;\n\n           // Get values from &apos;OBV&apos; indicator lines. \n           var OBVNew = OBV.GetValue();\n           SetValue(OBVNew);\n       }\n   }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator OBV(PriceType priceType)
    parameters:
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for OBV
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function OBV(priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.OBV*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PVI(TradingPlatform.BusinessLayer.PriceType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.PVI(TradingPlatform.BusinessLayer.PriceType)
  id: PVI(TradingPlatform.BusinessLayer.PriceType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: PVI(PriceType)
  nameWithType: DefaultIndicators.PVI(PriceType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PVI(TradingPlatform.BusinessLayer.PriceType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: PVI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3129
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Positive Volume Index (PVI) indicator.\n<p>The PVI value changes on the periods in which value of volume has increased in comparison with the previous period.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Positive Volume Index example.\n    /// </summary>\n    public class PVI : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Source price&quot;, 0, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        #endregion\n\n        // Holds PVI&apos;s values.\n        private Indicator pvi;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public PVI()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Positive Volume Index&quot;;\n            Description = &quot;Positive Volume Index example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;PVI&apos;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;PVI (&quot; + SourcePrice.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (PVI) from the default indicators list.\n            pvi = Core.Instance.IndicatorManager.DefaultIndicators.PVI(SourcePrice);\n            // Adds an auxiliary (PVI) indicator to the current one (PVI Example). \n            // This will let inner indicator (PVI) to be calculated in advance to the current one (PVI Example).\n            AddIndicator(pvi);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(pvi.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator PVI(PriceType priceType)
    parameters:
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: ''
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function PVI(priceType As PriceType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.PVI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Volume
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Volume
  id: Volume
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Volume()
  nameWithType: DefaultIndicators.Volume()
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Volume()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Volume
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3210
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Volume indicator.\n<p>Volume allows to confirm the strength of a trend or to suggest about it&apos;s weakness.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Volume example.\n    /// </summary>\n    public class Volume : Indicator\n    {\n        // Holds Volume&apos;s values.\n        private Indicator volume;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public Volume()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Volume&quot;;\n            Description = &quot;Volume example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Volume&apos;Line&quot;, Color.Gray, 1, LineStyle.HistogrammChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;Volume&quot;;\n            // Creates an instance of the proper indicator (Volume) from the default indicators list.\n            volume = Core.Instance.IndicatorManager.DefaultIndicators.Volume();\n            // Adds an auxiliary (Volume) indicator to the current one (Volume Example). \n            // This will let inner indicator (Volume) to be calculated in advance to the current one (Volume Example).\n            AddIndicator(volume);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(volume.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Volume()
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Volume As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Volume*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MFI(System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.MFI(System.Int32)
  id: MFI(System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: MFI(Int32)
  nameWithType: DefaultIndicators.MFI(Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MFI(System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: MFI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3302
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the MFI(Money Flow Index) indicator.\n<p>The MFI(Money Flow Index) is an oscillator that uses both price and volume to measure buying and selling pressure.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestMFI : Indicator\n    {\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;MFI Period&quot;, 0, 1, 999, 1, 0)]\n        public int Period = 14;\n\n        private Indicator mfi;\n        private LineLevel upLevel;\n        private LineLevel downLevel;\n\n        public TestMFI()\n            : base()\n        {\n            // Serves for an identification of related indicators.\n            Name = &quot;Test MFI&quot;;\n            Description = &quot;Example of using built-in MFI indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;MFI&quot;, Color.Orange, 5, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestMFI (&quot; + Period + &quot;)&quot;;\n\n            // Get MFI indicator from built-in indicator collection \n            mfi = Core.Instance.IndicatorManager.DefaultIndicators.MFI(Period);\n\n            // Get an instance of level lines from MFI indicator.\n            upLevel = mfi.LinesLevels[0];\n            downLevel = mfi.LinesLevels[1];\n\n            // Attach the &apos;MFI&apos; indicator to the current &apos;TestMFI&apos;.\n            AddIndicator(mfi);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.\n            if (Count &lt;= Period)\n                return;\n\n            // Start the calculation only on HistoricalBar or NewBar.\n            if (args.Reason == UpdateReason.NewTick)\n                return;\n\n            // Get current and previous values of MFI indicator.\n            var currMFI = mfi.GetValue(0);\n            var prevMFI = mfi.GetValue(1);\n\n            // Assign 0 to a signal variable by default .  \n            var signal = 0;\n\n            // Change the signal value if the crossing of &apos;ROC&apos; indicator with zero level was happened. \n            if (currMFI > upLevel.Level &amp;&amp; prevMFI &lt; upLevel.Level)\n                signal = 1;\n            else if (currMFI &lt; downLevel.Level &amp;&amp; prevMFI > downLevel.Level)\n                signal = -1;\n\n            // Set signal value to a &apos;Signal&apos; line buffer. \n            SetValue(signal);\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator MFI(int period)
    parameters:
    - id: period
      type: System.Int32
      description: Period of MFI.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function MFI(period As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.MFI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AC
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.AC
  id: AC
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: AC()
  nameWithType: DefaultIndicators.AC()
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AC()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: AC
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3383
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Acceleration/Deceleration Oscillator (AC).\n<p>AC measures the acceleration and deceleration of the current momentum.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Acceleration Oscillator example.\n    /// </summary>\n    public class AC : Indicator\n    {\n        // Holds AC&apos;s values.\n        private Indicator ac;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public AC()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Acceleration Oscillator&quot;;\n            Description = &quot;Acceleration Oscillator example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;AC&apos;Line&quot;, Color.Gray, 1, LineStyle.HistogrammChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;AC&quot;;\n            // Creates an instance of the proper indicator (AC) from the default indicators list.\n            ac = Core.Instance.IndicatorManager.DefaultIndicators.AC();\n            // Adds an auxiliary (AC) indicator to the current one (AC Example). \n            // This will let inner indicator (AC) to be calculated in advance to the current one (AC Example).\n            AddIndicator(ac);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(ac.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator AC()
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function AC As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.AC*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ATR(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.ATR(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  id: ATR(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: ATR(Int32, MaMode)
  nameWithType: DefaultIndicators.ATR(Int32, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ATR(System.Int32, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: ATR
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3499
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Average True Range (ATR) indicator.\n<p>The ATR measures of market volatility.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System;\n\nnamespace Example\n{\n   public class TestATR : Indicator\n   {\n       // Displays Input Parameter as input field.\n       [InputParameter(&quot;Period&quot;, 0, 1, 999, 1, 0)]\n       public int Period = 20;\n\n       // Displays Input Parameter as input field.\n       [InputParameter(&quot;Period of Moving Average (ATR)&quot;, 1, 1, 999, 1, 0)]\n       public int AtrPeriod = 13;\n\n       // Displays Input Parameter as dropdown list.\n       [InputParameter(&quot;Type of Moving Average (ATR)&quot;, 2, new object[] {\n        &quot;Simple&quot;, MaMode.SMA,\n        &quot;Exponential&quot;, MaMode.EMA,\n        &quot;Smoothed&quot;, MaMode.SMMA,\n        &quot;Linear Weighted&quot;, MaMode.LWMA}\n       )]\n       public MaMode MAType = MaMode.SMA;\n\n       private Indicator atr;\n       private int maxPeriod;\n\n       public TestATR()\n           : base()\n       {\n           // Defines indicator&apos;s name and description.\n           Name = &quot;TestATR&quot;;\n           Description = &quot;Example of using built-in ATR indicator&quot;;\n       }\n\n       public override void Init()\n       {\n           // Serves for an identification of related indicators with different parameters.\n           ShortName = &quot;My indicator (&quot;+ Period + &quot;:&quot; + AtrPeriod + &quot;:&quot; + MAType.ToString() + &quot;)&quot;;\n\n           // Get ATR indicator from built-in indicator collection.\n           atr = Core.Instance.IndicatorManager.DefaultIndicators.ATR(AtrPeriod, MAType);\n\n           maxPeriod = Math.Max(Period, AtrPeriod);\n\n           // Add auxiliary ATR indicator to the current one. \n           AddIndicator(atr);\n       }\n\n       public override void OnUpdate(UpdateArgs args)\n       {\n           // Launch calculation every NewBar only.\n           if (args.Reason != UpdateReason.NewBar)\n               return;\n\n           // Skip max period.\n           if (Count &lt;= maxPeriod)\n               return;\n\n           // Get the highest and lowest values of ATR on the interval.\n           var highestATR = GetHighestATR(0, Period);\n           var lowestATR = GetLowestATR(0, Period);\n\n           // Show alert window with usefull information.\n           Alert($&quot;The highest ATR value on the interval is : {highestATR}\\n&quot; +\n                 $&quot;The lowest ATR value on the interval is  : {lowestATR}&quot;);\n       }\n\n       private double GetHighestATR(int startOffset, int count)\n       {\n           // Find the highest value of ATR indicator on the specific interval.\n           int maxValueOffset = startOffset;\n           for (int i = 0; i &lt; count; i++)\n           {\n               if (atr.GetValue(maxValueOffset) &lt; atr.GetValue(startOffset + i))\n                   maxValueOffset = startOffset + i;\n           }\n           return maxValueOffset;\n       }\n\n       private double GetLowestATR(int startOffset, int count)\n       {\n           // Find the lowest value of ATR indicator on the specific interval.\n           int minValueOffset = startOffset;\n           for (int i = 0; i &lt; count; i++)\n           {\n               if (atr.GetValue(minValueOffset) > atr.GetValue(startOffset + i))\n                   minValueOffset = startOffset + i;\n           }\n           return minValueOffset;\n       }\n   }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator ATR(int period, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of Moving Average.
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function ATR(period As Integer, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.ATR*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.KAMA(System.Int32,System.Double,System.Double,System.Double,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AMATrendType)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.KAMA(System.Int32,System.Double,System.Double,System.Double,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AMATrendType)
  id: KAMA(System.Int32,System.Double,System.Double,System.Double,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AMATrendType)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: KAMA(Int32, Double, Double, Double, Double, PriceType, AMATrendType)
  nameWithType: DefaultIndicators.KAMA(Int32, Double, Double, Double, Double, PriceType, AMATrendType)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.KAMA(System.Int32, System.Double, System.Double, System.Double, System.Double, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.AMATrendType)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: KAMA
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3628
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Kaufman Adaptive Moving Average (KAMA) indicator.\n<p>KAMA is an exponential style average with a smoothing that varies according to recent data.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Kaufman Adaptive Moving Average example.\n    /// </summary>\n    public class KAMA : Indicator\n    {\n        #region Parameters\n\n        // Defines initial parameters.\n        [InputParameter(&quot;Period&quot;, 0, 1, 9999)]\n        public int periodAMA = 10;\n\n        [InputParameter(&quot;#Fast&quot;, 1, 1, 500, 1)]\n        public double nfast = 2.0;\n\n        [InputParameter(&quot;#Slow&quot;, 2, 1, 500, 1)]\n        public double nslow = 30.0;\n\n        [InputParameter(&quot;G&quot;, 3, 1, 10, 0.1)]\n        public double G = 2.0;\n\n        [InputParameter(&quot;dK&quot;, 4, 1, 10, 0.1)]\n        public double dK = 2.0;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Sources prices for MA&quot;, 5, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Median&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;AMA Trend Type&quot;, 6, new object[] {\n               &quot;Fixed&quot;, AMATrendType.Fixed,\n             &quot;Average&quot;, AMATrendType.Average }\n        )]\n        public AMATrendType AMA_Trend_Type;\n\n        #endregion\n\n        // Holds KAMA&apos;s values.\n        private Indicator kama;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public KAMA()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Kaufman Adaptive Moving Average example&quot;;\n            Description = &quot;Kaufman Adaptive Moving Average example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;KAMA&apos;Line&quot;, Color.Gray, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;KAMA (&quot; + periodAMA.ToString() + &quot;: &quot; + nfast.ToString() + &quot;: &quot; + nslow.ToString() + &quot;: &quot; + G.ToString() + &quot;: &quot; + dK.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (KAMA) from the default indicators list.\n            kama = Core.Instance.IndicatorManager.DefaultIndicators.KAMA(periodAMA,nfast, nslow, G, dK, SourcePrice, AMA_Trend_Type);\n            // Adds an auxiliary (KAMA) indicator to the current one (KAMA Example). \n            // This will let inner indicator (KAMA) to be calculated in advance to the current one (KAMA Example).\n            AddIndicator(kama);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(kama.GetValue());\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator KAMA(int period, double fast, double slow, double G, double dK, PriceType priceType, AMATrendType trendType)
    parameters:
    - id: period
      type: System.Int32
      description: Period
    - id: fast
      type: System.Double
      description: Fast factor
    - id: slow
      type: System.Double
      description: Slow factor
    - id: G
      type: System.Double
      description: G coefficient
    - id: dK
      type: System.Double
      description: dK coefficient
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    - id: trendType
      type: TradingPlatform.BusinessLayer.AMATrendType
      description: AMA Trend Type
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function KAMA(period As Integer, fast As Double, slow As Double, G As Double, dK As Double, priceType As PriceType, trendType As AMATrendType) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.KAMA*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Qstick(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Qstick(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  id: Qstick(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Qstick(Int32, MaMode)
  nameWithType: DefaultIndicators.Qstick(Int32, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Qstick(System.Int32, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Qstick
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3734
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Qstick indicator.\n<p>The Qstick is a moving average that shows the difference between the prices at which an issue opens and closes.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Qstick example.\n    /// </summary>\n    public class Qstick : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period&quot;, 0, 1, 999, 0, 0)]\n        public int Period = 20;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n        )]\n        public MaMode MAType = MaMode.SMA;\n\n        #endregion\n\n        // Holds Qstick&apos;s values.\n        private Indicator qstick;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public Qstick()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Qstick example&quot;;\n            Description = &quot;Qstick example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Qstick&apos;Line&quot;, Color.Gray, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;Qstick (&quot; + Period.ToString() + &quot;: &quot; + MAType.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (Qstick) from the default indicators list.\n            qstick = Core.Instance.IndicatorManager.DefaultIndicators.Qstick(Period, MAType);\n            // Adds an auxiliary (Qstick) indicator to the current one (Qstick Example). \n            // This will let inner indicator (Qstick) to be calculated in advance to the current one (Qstick Example).\n            AddIndicator(qstick);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets value for displaying on the chart.\n            SetValue(qstick.GetValue());\n        }\n    }\n}        </code></pre>\n</span>\n"
  syntax:
    content: public Indicator Qstick(int period, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: ''
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: ''
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Qstick(period As Integer, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Qstick*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SI(System.Double)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.SI(System.Double)
  id: SI(System.Double)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: SI(Double)
  nameWithType: DefaultIndicators.SI(Double)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SI(System.Double)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: SI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3833
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGet the Swing Index (SI) indicator.\n<p> The SI is used to confirm trend line breakouts on price charts.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestSI : Indicator\n    {\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;Divider&quot;, 0, 0.1, 9999.0, 0.1, 1)]\n        public double Divider = 300.0;\n\n        [InputParameter(&quot;The interval for calculation of percentile&quot;, 1, 1, 999, 1, 0)]\n        public int PercInterval = 100;\n\n        private Indicator si;\n\n        public TestSI()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;Test SI&quot;;\n            Description = &quot;Example of using built-in SI indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Percentile&quot;, Color.HotPink, 1, LineStyle.SimpleChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = $&quot;TestSI (&quot; + Divider + &quot;:&quot;+ PercInterval +&quot;)&quot;;\n\n            // Get SI indicator from built-in indicator collection.\n            si = Core.Instance.IndicatorManager.DefaultIndicators.SI(Divider);\n\n            // Add auxiliary SI indicator to the current one. \n            AddIndicator(si);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.\n            if (Count &lt;= PercInterval)\n                return;\n\n            // Get a current SI value.\n            double siValue = si.GetValue();\n\n            // Calculate a percentile of current SI value.\n            var percentile = CalculatePercentile(0, PercInterval, siValue);\n\n            // Set value to &quot;Percentile&quot; line buffer.\n            SetValue(percentile, 0, 0);\n        }\n\n        private double CalculatePercentile(int startOffset, int inteval, double value)\n        {\n            // Calculate the count of all SI values, \n            // which are equal or less than the current SI value on an interval.\n            double count = 0d;\n            if (inteval &lt;= 0)\n                return 0d;\n\n            for (int i = startOffset; i &lt; inteval; i++)\n            {\n                if (si.GetValue(i) &lt;= value)\n                    count = count + 1.0;\n            }\n            return count / inteval * 100d;\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator SI(double divider)
    parameters:
    - id: divider
      type: System.Double
      description: The divider.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function SI(divider As Double) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.SI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.TSI(System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.TSI(System.Int32,System.Int32)
  id: TSI(System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: TSI(Int32, Int32)
  nameWithType: DefaultIndicators.TSI(Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.TSI(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: TSI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 3939
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGet the True Strength Index (TSI) indicator.\n<p> \nThe TSI is a variation of the Relative Strength Indicator which uses a doubly-smoothed \nEMA of price momentum to eliminate choppy price changes and spot trend changes.\n</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n    public class TestTSI : Indicator\n    {\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;First MA period&quot;, 0, 1, 999, 1, 0)]\n        public int FirstPeriod = 5;\n\n        // Displays Input Parameter as input field.\n        [InputParameter(&quot;Second MA period&quot;, 1, 1, 999, 1, 0)]\n        public int SecondPeriod = 8;\n\n        [InputParameter(&quot;The interval for calculation of percentile&quot;, 2, 1, 999, 1, 0)]\n        public int PercInterval = 100;\n\n        private Indicator tsi;\n\n        public TestTSI()\n            : base()\n        {\n            // Defines indicator&apos;s name and description.\n            Name = &quot;Test TSI&quot;;\n            Description = &quot;Example of using built-in TSI indicator&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;Percentile&quot;, Color.Orange, 1, LineStyle.HistogrammChart);\n        }\n\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;TestTSI (&quot; + FirstPeriod + &quot;:&quot; + SecondPeriod + &quot;:&quot; + PercInterval + &quot;)&quot;;\n\n            // Get TSI indicator from built-in indicator collection.\n            tsi = Core.Instance.IndicatorManager.DefaultIndicators.TSI(FirstPeriod, SecondPeriod);\n\n            // Add auxiliary TSI indicator to the current one. \n            AddIndicator(tsi);\n        }\n\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Skip some period for correct calculation.\n            if (Count &lt;= PercInterval)\n                return;\n\n            // Get a current TSI value.\n            double tsiValue = tsi.GetValue();\n\n            // Calculate a percentile of current TSI value.\n            var percentile = CalculatePercentile(0, PercInterval, tsiValue);\n\n            // Set value to &quot;Percentile&quot; line buffer.\n            SetValue(percentile, 0, 0);\n        }\n\n        private double CalculatePercentile(int startOffset, int inteval, double value)\n        {\n            // Calculate the count of all TSI values, \n            // which are equal or less than the current TSI value on an interval.\n            double count = 0d;\n            if (inteval &lt;= 0)\n                return 0d;\n\n            for (int i = startOffset; i &lt; inteval; i++)\n            {\n                if (tsi.GetValue(i) &lt;= value)\n                    count = count + 1.0;\n            }\n            return count / inteval * 100d;\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator TSI(int firstPeriod, int secondPeriod)
    parameters:
    - id: firstPeriod
      type: System.Int32
      description: First MA period.
    - id: secondPeriod
      type: System.Int32
      description: Second MA period.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function TSI(firstPeriod As Integer, secondPeriod As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.TSI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ADX(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.ADX(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  id: ADX(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: ADX(Int32, MaMode)
  nameWithType: DefaultIndicators.ADX(Int32, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ADX(System.Int32, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: ADX
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4046
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Average Directional Index (ADX) indicator.\n<p>The ADX determines the strength of a prevailing trend.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// ADX example.\n    /// </summary>\n    public class ADX : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Period&quot;, 0, 1, 999, 0, 0)]\n        public int Period = 20;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n        )]\n        public MaMode MAType = MaMode.SMA;\n\n        #endregion\n\n        // Holds ADX&apos;s values.\n        private Indicator adx;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public ADX()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;ADX example&quot;;\n            Description = &quot;ADX example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;ADX&apos;Line&quot;, Color.Green, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;+DI&apos;Line&quot;, Color.Blue, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;-DI&apos;Line&quot;, Color.Red, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;ADX (&quot; + Period.ToString() + &quot;: &quot; + MAType.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (ADX) from the default indicators list.\n            adx = Core.Instance.IndicatorManager.DefaultIndicators.ADX(Period, MAType);\n            // Adds an auxiliary (ADX) indicator to the current one (ADX Example). \n            // This will let inner indicator (ADX) to be calculated in advance to the current one (ADX Example).\n            AddIndicator(adx);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets values for the displaying on the chart.\n            for (int i = 0; i &lt; adx.LinesSeries.Length; i++)\n            {\n                SetValue(adx.GetValue(0,i),0,i);\n            }\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator ADX(int period, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function ADX(period As Integer, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.ADX*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Keltner(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Keltner(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  id: Keltner(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Keltner(Int32, Double, PriceType, MaMode)
  nameWithType: DefaultIndicators.Keltner(Int32, Double, PriceType, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Keltner(System.Int32, System.Double, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Keltner
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4170
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Keltner Channel indicator.\n<p>Keltner Channels are volatility-based envelopes set above and below an exponential moving average.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// Keltner example.\n    /// </summary>\n    public class Keltner : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Sources prices for MA&quot;, 0, new object[] {\n             &quot;Close&quot;, PriceType.Close,\n             &quot;Open&quot;, PriceType.Open,\n             &quot;High&quot;, PriceType.High,\n             &quot;Low&quot;, PriceType.Low,\n             &quot;Typical&quot;, PriceType.Typical,\n             &quot;Medium&quot;, PriceType.Median,\n             &quot;Weighted&quot;, PriceType.Weighted}\n        )]\n        public PriceType SourcePrice = PriceType.Close;\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n         )]\n        public MaMode MAType = MaMode.SMA;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Period of MA for Keltner&apos;s Channel&quot;, 2, 1, 9999, 1)]\n        public int Period = 5;\n\n        // Displays Input Parameter as dropdown list.\n        [InputParameter(&quot;Coefficient of channel&apos;s width&quot;, 3, 1, 100)]\n        public double Offset = 2;\n\n        #endregion\n\n        // Holds Keltner&apos;s values.\n        private Indicator keltner;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public Keltner()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;Keltner example&quot;;\n            Description = &quot;Keltner example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;MA&apos;Line&quot;, Color.Coral, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;+ATR&apos;Line&quot;, Color.Red, 1, LineStyle.SimpleChart);\n            AddLineSeries(&quot;-ATR&apos;Line&quot;, Color.Purple, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;Keltner (&quot; + Period.ToString() + &quot;: &quot; + Offset.ToString() + &quot;: &quot; + SourcePrice.ToString() + &quot;: &quot; + MAType.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (Keltner) from the default indicators list.\n            keltner = Core.Instance.IndicatorManager.DefaultIndicators.Keltner(Period, Offset, SourcePrice, MAType);\n            // Adds an auxiliary (Keltner) indicator to the current one (Keltner Example). \n            // This will let inner indicator (Keltner) to be calculated in advance to the current one (Keltner Example).\n            AddIndicator(keltner);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets values for the displaying on the chart.\n            for (int i = 0; i &lt; keltner.LinesSeries.Length; i++)  \n            {\n                SetValue(keltner.GetValue(0,i),0,i);\n            }\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Keltner(int period, double offset, PriceType priceType, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of MA for Keltner&apos;s Channel
    - id: offset
      type: System.Double
      description: Coefficient of channel&apos;s width
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
      description: Sources prices for MA
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Keltner(period As Integer, offset As Double, priceType As PriceType, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Keltner*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PPO(System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.PPO(System.Int32,System.Int32,System.Int32)
  id: PPO(System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: PPO(Int32, Int32, Int32)
  nameWithType: DefaultIndicators.PPO(Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PPO(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: PPO
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4275
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nReturns an instance of the Percentage Price Oscillator (PPO).\n<p>Percentage Price Oscillator is a momentum indicator. Signal line is EMA of PPO. Formula: (FastEMA-SlowEMA)/SlowEMA.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace IndicatorExample\n{\n    /// <summary>\n    /// PPO example.\n    /// </summary>\n    public class PPO : Indicator\n    {\n        #region Parameters\n\n        // Displays Input Parameter as input field (or checkbox if value type is bolean).\n        [InputParameter(&quot;Fast EMA Period&quot;, 0)]\n        public int fastEmaPeriod = 12;\n\n        [InputParameter(&quot;Slow EMA Period&quot;, 1)]\n        public int slowEmaPeriod = 26;\n\n        [InputParameter(&quot;Signal EMA Period&quot;, 2)]\n        public int signalEmaPeriod = 9;\n\n        #endregion\n\n        // Holds PPO&apos;s values.\n        private Indicator ppo;\n\n        /// <summary>\n        /// Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n        /// </summary>\n        public PPO()\n             : base()\n        {\n            // Defines indicator&apos;s group, name and description.\n            Group = &quot;Custom&quot;;\n            Name = &quot;PPO example&quot;;\n            Description = &quot;PPO example&quot;;\n\n            // Defines line on demand with particular parameters.\n            AddLineSeries(&quot;PPO&apos;Line&quot;, Color.SkyBlue, 2, LineStyle.SimpleChart);\n            AddLineSeries(&quot;Signal&apos;Line&quot;, Color.Red, 1, LineStyle.SimpleChart);\n        }\n\n        /// <summary>\n        /// This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) updates.\n        /// </summary>\n        public override void Init()\n        {\n            // Serves for an identification of related indicators with different parameters.\n            ShortName = &quot;PPO (&quot; + fastEmaPeriod.ToString() + &quot;: &quot; + slowEmaPeriod.ToString() + &quot;: &quot; + signalEmaPeriod.ToString() + &quot;)&quot;;\n            // Creates an instance of the proper indicator (PPO) from the default indicators list.\n            ppo = Core.Instance.IndicatorManager.DefaultIndicators.PPO(fastEmaPeriod, slowEmaPeriod, signalEmaPeriod);\n            // Adds an auxiliary (PPO) indicator to the current one (PPO Example). \n            // This will let inner indicator (PPO) to be calculated in advance to the current one (PPO Example).\n            AddIndicator(ppo);\n        }\n\n        /// <summary>\n        /// Calculation entry point. This function is called when a price data updates. \n        /// Will be runing under the HistoricalBar mode during history loading. \n        /// Under NewTick during realtime. \n        /// Under NewBar if start of the new bar is required.\n        /// </summary>\n        /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n        public override void OnUpdate(UpdateArgs args)\n        {\n            // Sets values for the displaying on the chart.\n            for (int i = 0; i &lt; ppo.LinesSeries.Length; i++)  \n            {\n                SetValue(ppo.GetValue(0,i),0,i);\n            }\n        }\n    }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator PPO(int fastPeriod, int slowPeriod, int signalPeriod)
    parameters:
    - id: fastPeriod
      type: System.Int32
      description: Fast EMA Period
    - id: slowPeriod
      type: System.Int32
      description: Slow EMA Period
    - id: signalPeriod
      type: System.Int32
      description: Signal EMA Period
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function PPO(fastPeriod As Integer, slowPeriod As Integer, signalPeriod As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.PPO*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode)
  id: Stochastic(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Stochastic(Int32, Int32, Int32, MaMode)
  nameWithType: DefaultIndicators.Stochastic(Int32, Int32, Int32, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic(System.Int32, System.Int32, System.Int32, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Stochastic
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4367
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Stochastic Slow.\n<p>Shows the location of the current close relative to the high/low range over a set number of periods (Slow).</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\nnamespace Example\n{\n  public class TestStochastic : Indicator\n  {\n      #region Paramaters\n      // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n      [InputParameter(&quot;Stochastic Period&quot;, 0, 1, 999, 1, 0)]\n      public int Period = 20;\n      [InputParameter(&quot;Smooth Period&quot;, 0, 1, 999, 1, 0)]\n      public int Smooth = 3;\n      [InputParameter(&quot;DoubleSmooth Period&quot;, 0, 1, 999, 1, 0)]\n      public int DoubleSmooth = 6;\n       #endregion Parameters\n\n       private Indicator Stoch;\n      ///<summary>\n      ///Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n      ///</summary>\n      public TestStochastic()\n          : base()\n      {\n          // Serves for an identification of related indicators with different parameters.\n          Name = &quot;TestStochastic&quot;;\n          Description = &quot;Example of using built-in Stochastic indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n          AddLineSeries(&quot;Stochastic&quot;, Color.Green, 1, LineStyle.SimpleChart);\n          AddLineSeries(&quot;Stochastic Smoothed&quot;, Color.LightSkyBlue, 1, LineStyle.SimpleChart);\n       }\n      /// <summary>\n      ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n      ///</summary>\n      public override void Init()\n      { \n          ShortName = &quot;TestStochastic &quot; + Period.ToString();\n           // Get &apos;Stochastic&apos; indicator from built-in indicator collection.\n          Stoch = Core.Instance.IndicatorManager.DefaultIndicators.Stochastic(Period, Smooth, DoubleSmooth, MaMode.LWMA);\n          AddIndicator(Stoch);\n      }\n      /// <summary>\n      /// Calculation entry point. This function is called when a price data updates. \n      /// Will be runing under the HistoricalBar mode during history loading. \n      /// Under NewTick during realtime. \n      /// Under NewBar if start of the new bar is required.\n      /// </summary>\n      /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n      public override void OnUpdate(UpdateArgs args)\n      {\n          // Skip some period for correct calculation.  \n          if (Count &lt;= Period)\n              return;\n\n           // Get values from &apos;Stoch&apos; indicator lines. \n          var StochNew = Stoch.GetValue();\n          var StochNewMA = Stoch.GetValue(0,1);\n          SetValue(StochNew);\n          SetValue(StochNewMA,0,1);\n       }\n  }\n} </code></pre>\n</span>\n"
  syntax:
    content: public Indicator Stochastic(int period, int smooth, int doubleSmooth, MaMode MaType)
    parameters:
    - id: period
      type: System.Int32
      description: Period
    - id: smooth
      type: System.Int32
      description: Smoothing
    - id: doubleSmooth
      type: System.Int32
      description: Double smoothing
    - id: MaType
      type: TradingPlatform.BusinessLayer.MaMode
      description: Moving type
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Stochastic(period As Integer, smooth As Integer, doubleSmooth As Integer, MaType As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI(System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI(System.Int32,System.Int32,System.Int32)
  id: StochasticxRSI(System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: StochasticxRSI(Int32, Int32, Int32)
  nameWithType: DefaultIndicators.StochasticxRSI(Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: StochasticxRSI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4460
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Stochastic x Relative Strength Index.\n<p>StochRSI is an oscillator that measures the level of RSI relative to its range.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n  public class TestStochRSI : Indicator\n  {\n      #region Paramaters\n      // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n      [InputParameter(&quot;Stochastic Period&quot;, 0, 1, 999, 1, 0)]\n      public int Period = 20;\n      [InputParameter(&quot;Smooth Period&quot;, 0, 1, 999, 1, 0)]\n      public int Smooth = 3;\n      [InputParameter(&quot;DoubleSmooth Period&quot;, 0, 1, 999, 1, 0)]\n      public int DoubleSmooth = 6;\n       #endregion Parameters\n\n       private Indicator StochRSI;\n      ///<summary>\n      ///Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n      ///</summary>\n      public TestStochRSI()\n          : base()\n      {\n          // Serves for an identification of related indicators with different parameters.\n          Name = &quot;TestStochasticxRSI&quot;;\n          Description = &quot;Example of using built-in Stochastic x Relative Strength Index indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n          AddLineSeries(&quot;Stochastic&quot;, Color.Green, 1, LineStyle.SimpleChart);\n          AddLineSeries(&quot;Stochastic Smoothed&quot;, Color.LightSkyBlue, 1, LineStyle.SimpleChart);\n       }\n      /// <summary>\n      ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n      ///</summary>\n      public override void Init()\n      {\n           ShortName = &quot;StochasticxRSI&quot;+ &quot;(&quot;+Period+&quot;)&quot;;\n           // Get &apos;StochasticxRSI&apos; indicator from built-in indicator collection.\n           StochRSI = Core.Instance.IndicatorManager.DefaultIndicators.StochasticxRSI(Period, Smooth, DoubleSmooth);\n           AddIndicator(StochRSI);\n      }\n      /// <summary>\n      /// Calculation entry point. This function is called when a price data updates. \n      /// Will be runing under the HistoricalBar mode during history loading. \n      /// Under NewTick during realtime. \n      /// Under NewBar if start of the new bar is required.\n      /// </summary>\n      /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n      public override void OnUpdate(UpdateArgs args)\n      {\n          // Skip some period for correct calculation.  \n          if (Count/*&lt;=*/ Period)\n              return;\n\n           // Get values from &apos;StochasticxRSI&apos; indicator lines. \n          var StochNew = StochRSI.GetValue();\n          var StochNewMA = StochRSI.GetValue(0,1);\n          SetValue(StochNew);\n          SetValue(StochNewMA,0,1);\n       }\n  }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator StochasticxRSI(int rsiPeriod, int kPeriod, int dPeriod)
    parameters:
    - id: rsiPeriod
      type: System.Int32
      description: Period
    - id: kPeriod
      type: System.Int32
      description: Smoothing
    - id: dPeriod
      type: System.Int32
      description: Double smoothing
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function StochasticxRSI(rsiPeriod As Integer, kPeriod As Integer, dPeriod As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ICH(System.Int32,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.ICH(System.Int32,System.Int32,System.Int32)
  id: ICH(System.Int32,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: ICH(Int32, Int32, Int32)
  nameWithType: DefaultIndicators.ICH(Int32, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ICH(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: ICH
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4551
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Ichimoku.\n<p>Enables to quickly discern and filter &apos;at a glance&apos; the low-probability trading setups from those of higher probability.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n  public class TestICH : Indicator\n  {\n       #region Paramaters\n       // Defines the &apos;Period&apos; parameter as input field (where &apos;min&apos; is 1 and &apos;max&apos; is 999).\n       [InputParameter(&quot;Tenkan Sen&quot;, 0, 1, 999, 1, 0)]\n       public int TenkanPeriod = 9;\n\n       [InputParameter(&quot;Kijun Sen&quot;, 1, 1, 999, 1, 0)]\n       public int KijunPeriod = 26;\n\n       [InputParameter(&quot;Senkou Span B&quot;, 2, 1, 999, 1, 0)]\n       public int SenkouSpanB = 52;\n       #endregion Parameters\n\n       private Indicator ICH;\n      ///<summary>\n      ///Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n      ///</summary>\n      public TestICH()\n          : base()\n      {\n          // Serves for an identification of related indicators with different parameters.\n          Name = &quot;TestICH&quot;;\n          Description = &quot;Example of using built-in Ichimoku indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n          AddLineSeries(&quot;Tenkan Sen&quot;, Color.Green, 1, LineStyle.SimpleChart);\n          AddLineSeries(&quot;Kijun Sen&quot;, Color.LightSkyBlue, 1, LineStyle.SimpleChart);\n       }\n      /// <summary>\n      ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n      ///</summary>\n      public override void Init()\n      {\n          ShortName = &quot;TestICH :Tenkan&quot; + TenkanPeriod.ToString() + &quot; vs Kijun&quot; + KijunPeriod.ToString();\n           // Get &apos;ICH&apos; indicator from built-in indicator collection.\n           ICH = Core.Instance.IndicatorManager.DefaultIndicators.ICH(TenkanPeriod, KijunPeriod, SenkouSpanB);\n           AddIndicator(ICH);\n      }\n      /// <summary>\n      /// Calculation entry point. This function is called when a price data updates. \n      /// Will be runing under the HistoricalBar mode during history loading. \n      /// Under NewTick during realtime. \n      /// Under NewBar if start of the new bar is required.\n      /// </summary>\n      /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n      public override void OnUpdate(UpdateArgs args)\n      {           \n          // Get values from &apos;ICH&apos; indicator lines. \n          var Tenkan = ICH.GetValue();\n          var Kijun = ICH.GetValue(0,1);\n          SetValue(Tenkan);\n          SetValue(Kijun, 0,1);\n       }\n  }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator ICH(int TenkanPeriod, int KijunPeriod, int SenkouSpanB)
    parameters:
    - id: TenkanPeriod
      type: System.Int32
      description: Tenkan Period
    - id: KijunPeriod
      type: System.Int32
      description: Kijun Period
    - id: SenkouSpanB
      type: System.Int32
      description: Senkou Span B
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function ICH(TenkanPeriod As Integer, KijunPeriod As Integer, SenkouSpanB As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.ICH*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.DMI(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.DMI(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  id: DMI(System.Int32,TradingPlatform.BusinessLayer.MaMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: DMI(Int32, MaMode)
  nameWithType: DefaultIndicators.DMI(Int32, MaMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.DMI(System.Int32, TradingPlatform.BusinessLayer.MaMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: DMI
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4649
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Directional Movement Index(DMI) indicator.\n<p>The DMI іdentifies whether there is a definable trend in the market.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\n\nnamespace Example\n{\n   public class TestDMI : Indicator\n   {\n       // Displays Input Parameter as input field.\n       [InputParameter(&quot;Period of DMI&quot;, 0, 1, 999, 1, 0)]\n       public int Period = 13;\n\n       // Displays Input Parameter as dropdown list.\n       [InputParameter(&quot;Type of Moving Average&quot;, 1, new object[] {\n            &quot;Simple&quot;, MaMode.SMA,\n            &quot;Exponential&quot;, MaMode.EMA,\n            &quot;Modified&quot;, MaMode.SMMA,\n            &quot;Linear Weighted&quot;, MaMode.LWMA}\n       )]\n       public MaMode MAType = MaMode.SMA;\n\n       private Indicator dmi;\n\n       public TestDMI()\n           : base()\n       {\n           // Defines indicator&apos;s name and description.\n           Name = &quot;Test DMI&quot;;\n           Description = &quot;Example of using built-in DMI indicator&quot;;\n           Group = &quot;Test&quot;;\n       }\n\n       public override void Init()\n       {\n           // Serves for an identification of related indicators with different parameters.\n           ShortName = &quot;TestDMI (&quot; + Period + &quot;:&quot; + MAType.ToString() + &quot;)&quot;;\n\n           // Get DMI and two MA indicators from built-in indicator collection.\n           dmi = Core.Instance.IndicatorManager.DefaultIndicators.DMI(Period, MAType);\n\n           // Add auxiliary DMI indicator to the current one.\n           AddIndicator(dmi);\n       }\n\n       public override void OnUpdate(UpdateArgs args)\n       {\n           // Skip all historical bar and start calculation only when a NewBar comes.\n           if (args.Reason == UpdateReason.HistoricalBar || args.Reason == UpdateReason.NewTick)\n               return;\n\n           // Skip some period for correct calculation.\n           if (Count &lt;= Period)\n               return;\n\n           // Get &quot;Plus&quot; and &quot;Minus&quot; line values from the DMI indicator.\n           double plus = dmi.GetValue(0, 0);\n           double minus = dmi.GetValue(0, 1);\n\n           string upperLineName = string.Empty;\n\n           // Get the name of upper line.\n           if (plus > minus)\n               upperLineName = dmi.LinesSeries[0].Name;\n           else if (plus &lt; minus)\n               upperLineName = dmi.LinesSeries[1].Name;\n\n           // Show the alert window with some info.\n           Alert(&quot;At this moment, the upper line is : &quot; + upperLineName);\n       }\n   }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator DMI(int period, MaMode mode)
    parameters:
    - id: period
      type: System.Int32
      description: Period of Moving Average.
    - id: mode
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Moving Average.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function DMI(period As Integer, mode As MaMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.DMI*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Alligator(TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.Alligator(TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32)
  id: Alligator(TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: Alligator(MaMode, PriceType, Int32, Int32, MaMode, PriceType, Int32, Int32, MaMode, PriceType, Int32, Int32)
  nameWithType: DefaultIndicators.Alligator(MaMode, PriceType, Int32, Int32, MaMode, PriceType, Int32, Int32, MaMode, PriceType, Int32, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Alligator(TradingPlatform.BusinessLayer.MaMode, TradingPlatform.BusinessLayer.PriceType, System.Int32, System.Int32, TradingPlatform.BusinessLayer.MaMode, TradingPlatform.BusinessLayer.PriceType, System.Int32, System.Int32, TradingPlatform.BusinessLayer.MaMode, TradingPlatform.BusinessLayer.PriceType, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: Alligator
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4763
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nGets the Alligator.\n<p>Three moving averages with different colors, periods and calculation methods.</p>\n"
  example:
  - "\n<span id=\"Example 1\">\n<pre><code>using TradingPlatform.BusinessLayer;\nusing System.Drawing;\n\nnamespace Example\n{\n  public class TestAlligator : Indicator\n  {\n       #region Paramaters\n       // Displays Input Parameter as dropdown list.\n       [InputParameter(&quot;Type of Jaw Moving Average&quot;, 0, new object[]{\n           &quot;Simple&quot;, MaMode.SMA,\n           &quot;Exponential&quot;, MaMode.EMA,\n           &quot;Modified&quot;, MaMode.SMMA,\n              &quot;Linear Weighted&quot;, MaMode.LWMA}\n       )]\n       public MaMode JawMAType = MaMode.SMA;\n\n       [InputParameter(&quot;Source price for Jaw Moving Average&quot;, 1, new object[] {\n            &quot;Close&quot;, PriceType.Close,\n            &quot;Open&quot;, PriceType.Open,\n            &quot;High&quot;, PriceType.High,\n            &quot;Low&quot;, PriceType.Low,\n            &quot;Typical&quot;, PriceType.Typical,\n            &quot;Medium&quot;, PriceType.Median,\n            &quot;Weighted&quot;, PriceType.Weighted}\n       )]\n       public PriceType JawSourcePrice = PriceType.Close;\n\n       // Displays Input Parameter as input field (or checkbox if value type is bolean).\n       [InputParameter(&quot;Period of Jaw Moving Average&quot;, 0, 2, 999, 1, 0)]\n       public int JawMAPeiod = 13;\n       #endregion Parameters\n\n       private Indicator Alligator;\n      ///<summary>\n      ///Indicator&apos;s constructor. Contains general information: name, description, LineSeries etc. \n      ///</summary>\n      public TestAlligator()\n          : base()\n      {\n          // Serves for an identification of related indicators with different parameters.\n          Name = &quot;TestAlligator&quot;;\n          Description = &quot;Example of using built-in Alligator indicator&quot;;\n\n           // Define two lines (on main window) with particular parameters \n          AddLineSeries(&quot;JAW&quot;, Color.Green, 1, LineStyle.SimpleChart);\n          AddLineSeries(&quot;LIPS&quot;, Color.LightSkyBlue, 1, LineStyle.SimpleChart);\n       }\n      /// <summary>\n      ///This function will be called after creating an indicator as well as after its input params reset or chart (instrument or timeframe) update\n      ///</summary>\n      public override void Init()\n      {\n           ShortName = &quot;TestAlligator :JawMAPeiod&quot; + JawMAPeiod.ToString();\n           // Get &apos;Alligator&apos; indicator from built-in indicator collection. Reset only jaw params, the rest is by default.\n           Alligator = Core.Instance.IndicatorManager.DefaultIndicators.Alligator(JawMAType, JawSourcePrice, JawMAPeiod, 0, MaMode.SMA,PriceType.Close,8,0, MaMode.SMA, PriceType.Close, 5, 0);\n           AddIndicator(Alligator);\n      }\n      /// <summary>\n      /// Calculation entry point. This function is called when a price data updates. \n      /// Will be runing under the HistoricalBar mode during history loading. \n      /// Under NewTick during realtime. \n      /// Under NewBar if start of the new bar is required.\n      /// </summary>\n      /// <param name=\"args\">Provides data of updating reason and incoming price.</param>\n      public override void OnUpdate(UpdateArgs args)\n      {\n          // Get values from &apos;Alligator&apos; indicator lines. \n          var Jaw = Alligator.GetValue();\n          var Lips = Alligator.GetValue(0,2);\n          SetValue(Jaw);\n          SetValue(Lips, 0,1);\n       }\n  }\n}</code></pre>\n</span>\n"
  syntax:
    content: public Indicator Alligator(MaMode JawMAType, PriceType JawSourcePrice, int JawMAPeiod, int JawMAShift, MaMode TeethMAType, PriceType TeethSourcePrice, int TeethMAPeiod, int TeethMAShift, MaMode LipsMAType, PriceType LipsSourcePrice, int LipsMAPeiod, int LipsMAShift)
    parameters:
    - id: JawMAType
      type: TradingPlatform.BusinessLayer.MaMode
      description: Type of Jaw Moving Average.
    - id: JawSourcePrice
      type: TradingPlatform.BusinessLayer.PriceType
      description: SourcePrice of Jaw Moving Average.
    - id: JawMAPeiod
      type: System.Int32
      description: Period of Jaw Moving Average.
    - id: JawMAShift
      type: System.Int32
      description: Shift of Jaw Moving Average.
    - id: TeethMAType
      type: TradingPlatform.BusinessLayer.MaMode
      description: Period of Moving Average.
    - id: TeethSourcePrice
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of Moving Average.
    - id: TeethMAPeiod
      type: System.Int32
      description: Period of Moving Average.
    - id: TeethMAShift
      type: System.Int32
      description: Type of Moving Average.
    - id: LipsMAType
      type: TradingPlatform.BusinessLayer.MaMode
      description: Period of Moving Average.
    - id: LipsSourcePrice
      type: TradingPlatform.BusinessLayer.PriceType
      description: Type of Moving Average.
    - id: LipsMAPeiod
      type: System.Int32
      description: Period of Moving Average.
    - id: LipsMAShift
      type: System.Int32
      description: Type of Moving Average.
    return:
      type: TradingPlatform.BusinessLayer.Indicator
      description: ''
    content.vb: Public Function Alligator(JawMAType As MaMode, JawSourcePrice As PriceType, JawMAPeiod As Integer, JawMAShift As Integer, TeethMAType As MaMode, TeethSourcePrice As PriceType, TeethMAPeiod As Integer, TeethMAShift As Integer, LipsMAType As MaMode, LipsSourcePrice As PriceType, LipsMAPeiod As Integer, LipsMAShift As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.Alligator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode)
  id: HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: HV(Int32, Int32, PriceType, HVSheduleMode)
  nameWithType: DefaultIndicators.HV(Int32, Int32, PriceType, HVSheduleMode)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32, System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.HVSheduleMode)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: HV
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4791
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: public Indicator HV(int stdPeriod, int volatilityPeriod, PriceType priceType, HVSheduleMode hvMode)
    parameters:
    - id: stdPeriod
      type: System.Int32
    - id: volatilityPeriod
      type: System.Int32
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
    - id: hvMode
      type: TradingPlatform.BusinessLayer.HVSheduleMode
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function HV(stdPeriod As Integer, volatilityPeriod As Integer, priceType As PriceType, hvMode As HVSheduleMode) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.HV*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode,System.Int32)
  commentId: M:TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode,System.Int32)
  id: HV(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.HVSheduleMode,System.Int32)
  parent: TradingPlatform.BusinessLayer.DefaultIndicators
  langs:
  - csharp
  - vb
  name: HV(Int32, Int32, PriceType, HVSheduleMode, Int32)
  nameWithType: DefaultIndicators.HV(Int32, Int32, PriceType, HVSheduleMode, Int32)
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.HV(System.Int32, System.Int32, TradingPlatform.BusinessLayer.PriceType, TradingPlatform.BusinessLayer.HVSheduleMode, System.Int32)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    id: HV
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Modules/Indicators/DefaultIndicators.cs
    startLine: 4796
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: public Indicator HV(int stdPeriod, int volatilityPeriod, PriceType priceType, HVSheduleMode hvMode, int percentilePeriod)
    parameters:
    - id: stdPeriod
      type: System.Int32
    - id: volatilityPeriod
      type: System.Int32
    - id: priceType
      type: TradingPlatform.BusinessLayer.PriceType
    - id: hvMode
      type: TradingPlatform.BusinessLayer.HVSheduleMode
    - id: percentilePeriod
      type: System.Int32
    return:
      type: TradingPlatform.BusinessLayer.Indicator
    content.vb: Public Function HV(stdPeriod As Integer, volatilityPeriod As Integer, priceType As PriceType, hvMode As HVSheduleMode, percentilePeriod As Integer) As Indicator
  overload: TradingPlatform.BusinessLayer.DefaultIndicators.HV*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TradingPlatform.BusinessLayer
  commentId: N:TradingPlatform.BusinessLayer
  name: TradingPlatform.BusinessLayer
  nameWithType: TradingPlatform.BusinessLayer
  fullName: TradingPlatform.BusinessLayer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.EMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.EMA
  name: EMA
  nameWithType: DefaultIndicators.EMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.EMA
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TradingPlatform.BusinessLayer.PriceType
  commentId: T:TradingPlatform.BusinessLayer.PriceType
  parent: TradingPlatform.BusinessLayer
  name: PriceType
  nameWithType: PriceType
  fullName: TradingPlatform.BusinessLayer.PriceType
- uid: TradingPlatform.BusinessLayer.Indicator
  commentId: T:TradingPlatform.BusinessLayer.Indicator
  parent: TradingPlatform.BusinessLayer
  name: Indicator
  nameWithType: Indicator
  fullName: TradingPlatform.BusinessLayer.Indicator
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.LWMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.LWMA
  name: LWMA
  nameWithType: DefaultIndicators.LWMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.LWMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.SMA
  name: SMA
  nameWithType: DefaultIndicators.SMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SMMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.SMMA
  name: SMMA
  nameWithType: DefaultIndicators.SMMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SMMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PPMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.PPMA
  name: PPMA
  nameWithType: DefaultIndicators.PPMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PPMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MAS3*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MAS3
  name: MAS3
  nameWithType: DefaultIndicators.MAS3
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MAS3
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MA
  name: MA
  nameWithType: DefaultIndicators.MA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MA
- uid: TradingPlatform.BusinessLayer.MaMode
  commentId: T:TradingPlatform.BusinessLayer.MaMode
  parent: TradingPlatform.BusinessLayer
  name: MaMode
  nameWithType: MaMode
  fullName: TradingPlatform.BusinessLayer.MaMode
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.BB*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.BB
  name: BB
  nameWithType: DefaultIndicators.BB
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.BB
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.CCI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.CCI
  name: CCI
  nameWithType: DefaultIndicators.CCI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.CCI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MMA
  name: MMA
  nameWithType: DefaultIndicators.MMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Regression*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Regression
  name: Regression
  nameWithType: DefaultIndicators.Regression
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Regression
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Channel*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Channel
  name: Channel
  nameWithType: DefaultIndicators.Channel
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Channel
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA
  name: AFIRMA
  nameWithType: DefaultIndicators.AFIRMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AFIRMA
- uid: TradingPlatform.BusinessLayer.AfirmaMode
  commentId: T:TradingPlatform.BusinessLayer.AfirmaMode
  parent: TradingPlatform.BusinessLayer
  name: AfirmaMode
  nameWithType: AfirmaMode
  fullName: TradingPlatform.BusinessLayer.AfirmaMode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.RSI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.RSI
  name: RSI
  nameWithType: DefaultIndicators.RSI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.RSI
- uid: TradingPlatform.BusinessLayer.RSIMode
  commentId: T:TradingPlatform.BusinessLayer.RSIMode
  parent: TradingPlatform.BusinessLayer
  name: RSIMode
  nameWithType: RSIMode
  fullName: TradingPlatform.BusinessLayer.RSIMode
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MD*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MD
  name: MD
  nameWithType: DefaultIndicators.MD
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MD
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MAE*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MAE
  name: MAE
  nameWithType: DefaultIndicators.MAE
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MAE
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SAR*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.SAR
  name: SAR
  nameWithType: DefaultIndicators.SAR
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SAR
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AO*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.AO
  name: AO
  nameWithType: DefaultIndicators.AO
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AO
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.CMO*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.CMO
  name: CMO
  nameWithType: DefaultIndicators.CMO
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.CMO
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ZZ*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.ZZ
  name: ZZ
  nameWithType: DefaultIndicators.ZZ
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ZZ
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AROON*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.AROON
  name: AROON
  nameWithType: DefaultIndicators.AROON
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AROON
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SD*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.SD
  name: SD
  nameWithType: DefaultIndicators.SD
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SD
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MACD*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MACD
  name: MACD
  nameWithType: DefaultIndicators.MACD
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MACD
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.KRI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.KRI
  name: KRI
  nameWithType: DefaultIndicators.KRI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.KRI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.BBF*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.BBF
  name: BBF
  nameWithType: DefaultIndicators.BBF
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.BBF
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ROC*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.ROC
  name: ROC
  nameWithType: DefaultIndicators.ROC
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ROC
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Momentum*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Momentum
  name: Momentum
  nameWithType: DefaultIndicators.Momentum
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Momentum
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.RLW*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.RLW
  name: RLW
  nameWithType: DefaultIndicators.RLW
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.RLW
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PO*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.PO
  name: PO
  nameWithType: DefaultIndicators.PO
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PO
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.OsMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.OsMA
  name: OsMA
  nameWithType: DefaultIndicators.OsMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.OsMA
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.OBV*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.OBV
  name: OBV
  nameWithType: DefaultIndicators.OBV
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.OBV
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PVI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.PVI
  name: PVI
  nameWithType: DefaultIndicators.PVI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PVI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Volume*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Volume
  name: Volume
  nameWithType: DefaultIndicators.Volume
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Volume
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.MFI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.MFI
  name: MFI
  nameWithType: DefaultIndicators.MFI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.MFI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.AC*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.AC
  name: AC
  nameWithType: DefaultIndicators.AC
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.AC
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ATR*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.ATR
  name: ATR
  nameWithType: DefaultIndicators.ATR
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ATR
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.KAMA*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.KAMA
  name: KAMA
  nameWithType: DefaultIndicators.KAMA
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.KAMA
- uid: TradingPlatform.BusinessLayer.AMATrendType
  commentId: T:TradingPlatform.BusinessLayer.AMATrendType
  parent: TradingPlatform.BusinessLayer
  name: AMATrendType
  nameWithType: AMATrendType
  fullName: TradingPlatform.BusinessLayer.AMATrendType
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Qstick*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Qstick
  name: Qstick
  nameWithType: DefaultIndicators.Qstick
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Qstick
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.SI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.SI
  name: SI
  nameWithType: DefaultIndicators.SI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.SI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.TSI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.TSI
  name: TSI
  nameWithType: DefaultIndicators.TSI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.TSI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ADX*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.ADX
  name: ADX
  nameWithType: DefaultIndicators.ADX
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ADX
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Keltner*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Keltner
  name: Keltner
  nameWithType: DefaultIndicators.Keltner
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Keltner
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.PPO*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.PPO
  name: PPO
  nameWithType: DefaultIndicators.PPO
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.PPO
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic
  name: Stochastic
  nameWithType: DefaultIndicators.Stochastic
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Stochastic
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI
  name: StochasticxRSI
  nameWithType: DefaultIndicators.StochasticxRSI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.StochasticxRSI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.ICH*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.ICH
  name: ICH
  nameWithType: DefaultIndicators.ICH
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.ICH
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.DMI*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.DMI
  name: DMI
  nameWithType: DefaultIndicators.DMI
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.DMI
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.Alligator*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.Alligator
  name: Alligator
  nameWithType: DefaultIndicators.Alligator
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.Alligator
- uid: TradingPlatform.BusinessLayer.DefaultIndicators.HV*
  commentId: Overload:TradingPlatform.BusinessLayer.DefaultIndicators.HV
  name: HV
  nameWithType: DefaultIndicators.HV
  fullName: TradingPlatform.BusinessLayer.DefaultIndicators.HV
- uid: TradingPlatform.BusinessLayer.HVSheduleMode
  commentId: T:TradingPlatform.BusinessLayer.HVSheduleMode
  parent: TradingPlatform.BusinessLayer
  name: HVSheduleMode
  nameWithType: HVSheduleMode
  fullName: TradingPlatform.BusinessLayer.HVSheduleMode
