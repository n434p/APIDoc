### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.MessageQuote
  commentId: T:TradingPlatform.BusinessLayer.MessageQuote
  id: MessageQuote
  parent: TradingPlatform.BusinessLayer
  children:
  - TradingPlatform.BusinessLayer.MessageQuote.#ctor(System.String,System.DateTime)
  - TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
  - TradingPlatform.BusinessLayer.MessageQuote.Time
  langs:
  - csharp
  - vb
  name: MessageQuote
  nameWithType: MessageQuote
  fullName: TradingPlatform.BusinessLayer.MessageQuote
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    id: MessageQuote
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    startLine: 9
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: >-
      [Serializable]

      [KnownType(typeof(Level2Quote))]

      [KnownType(typeof(Last))]

      [KnownType(typeof(Quote))]

      [KnownType(typeof(DOMQuote))]

      [KnownType(typeof(DayBar))]

      [DataContract(Name = "MessageQuote", Namespace = "TradingPlatform")]

      public abstract class MessageQuote : Message
    content.vb: >-
      <Serializable>

      <KnownType(GetType(Level2Quote))>

      <KnownType(GetType(Last))>

      <KnownType(GetType(Quote))>

      <KnownType(GetType(DOMQuote))>

      <KnownType(GetType(DayBar))>

      <DataContract(Name:="MessageQuote", Namespace:="TradingPlatform")>

      Public MustInherit Class MessageQuote
          Inherits Message
  inheritance:
  - System.Object
  - TradingPlatform.BusinessLayer.Integration.Message
  derivedClasses:
  - TradingPlatform.BusinessLayer.DayBar
  - TradingPlatform.BusinessLayer.DOMQuote
  - TradingPlatform.BusinessLayer.Last
  - TradingPlatform.BusinessLayer.Level2Quote
  - TradingPlatform.BusinessLayer.Quote
  inheritedMembers:
  - TradingPlatform.BusinessLayer.Integration.Message.Type
  - TradingPlatform.BusinessLayer.Integration.Message.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: TradingPlatform.BusinessLayer.Level2Quote
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: TradingPlatform.BusinessLayer.Last
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: TradingPlatform.BusinessLayer.Quote
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: TradingPlatform.BusinessLayer.DOMQuote
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: TradingPlatform.BusinessLayer.DayBar
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: MessageQuote
    - name: Namespace
      type: System.String
      value: TradingPlatform
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
  commentId: P:TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
  id: InstrumentId
  parent: TradingPlatform.BusinessLayer.MessageQuote
  langs:
  - csharp
  - vb
  name: InstrumentId
  nameWithType: MessageQuote.InstrumentId
  fullName: TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    id: InstrumentId
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    startLine: 18
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: >-
      [DataMember(Name = "Symbol")]

      public string InstrumentId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="Symbol")>

      Public ReadOnly Property InstrumentId As String
  overload: TradingPlatform.BusinessLayer.MessageQuote.InstrumentId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Symbol
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TradingPlatform.BusinessLayer.MessageQuote.Time
  commentId: P:TradingPlatform.BusinessLayer.MessageQuote.Time
  id: Time
  parent: TradingPlatform.BusinessLayer.MessageQuote
  langs:
  - csharp
  - vb
  name: Time
  nameWithType: MessageQuote.Time
  fullName: TradingPlatform.BusinessLayer.MessageQuote.Time
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    id: Time
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    startLine: 21
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: >-
      [DataMember(Name = "Time")]

      public DateTime Time { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <DataMember(Name:="Time")>

      Public ReadOnly Property Time As Date
  overload: TradingPlatform.BusinessLayer.MessageQuote.Time*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Time
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TradingPlatform.BusinessLayer.MessageQuote.#ctor(System.String,System.DateTime)
  commentId: M:TradingPlatform.BusinessLayer.MessageQuote.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: TradingPlatform.BusinessLayer.MessageQuote
  langs:
  - csharp
  - vb
  name: MessageQuote(String, DateTime)
  nameWithType: MessageQuote.MessageQuote(String, DateTime)
  fullName: TradingPlatform.BusinessLayer.MessageQuote.MessageQuote(System.String, System.DateTime)
  type: Constructor
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    id: .ctor
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Quote/MessageQuote.cs
    startLine: 27
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  syntax:
    content: protected MessageQuote(string instrumentId, DateTime time)
    parameters:
    - id: instrumentId
      type: System.String
    - id: time
      type: System.DateTime
    content.vb: Protected Sub New(instrumentId As String, time As Date)
  overload: TradingPlatform.BusinessLayer.MessageQuote.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: TradingPlatform.BusinessLayer
  commentId: N:TradingPlatform.BusinessLayer
  name: TradingPlatform.BusinessLayer
  nameWithType: TradingPlatform.BusinessLayer
  fullName: TradingPlatform.BusinessLayer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TradingPlatform.BusinessLayer.Integration.Message
  commentId: T:TradingPlatform.BusinessLayer.Integration.Message
  parent: TradingPlatform.BusinessLayer.Integration
  name: Message
  nameWithType: Message
  fullName: TradingPlatform.BusinessLayer.Integration.Message
- uid: TradingPlatform.BusinessLayer.Integration.Message.Type
  commentId: P:TradingPlatform.BusinessLayer.Integration.Message.Type
  parent: TradingPlatform.BusinessLayer.Integration.Message
  name: Type
  nameWithType: Message.Type
  fullName: TradingPlatform.BusinessLayer.Integration.Message.Type
- uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
  commentId: M:TradingPlatform.BusinessLayer.Integration.Message.ToString
  parent: TradingPlatform.BusinessLayer.Integration.Message
  name: ToString()
  nameWithType: Message.ToString()
  fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString()
  spec.csharp:
  - uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
    name: ToString
    nameWithType: Message.ToString
    fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
    name: ToString
    nameWithType: Message.ToString
    fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TradingPlatform.BusinessLayer.Integration
  commentId: N:TradingPlatform.BusinessLayer.Integration
  name: TradingPlatform.BusinessLayer.Integration
  nameWithType: TradingPlatform.BusinessLayer.Integration
  fullName: TradingPlatform.BusinessLayer.Integration
- uid: TradingPlatform.BusinessLayer.MessageQuote.InstrumentId*
  commentId: Overload:TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
  name: InstrumentId
  nameWithType: MessageQuote.InstrumentId
  fullName: TradingPlatform.BusinessLayer.MessageQuote.InstrumentId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TradingPlatform.BusinessLayer.MessageQuote.Time*
  commentId: Overload:TradingPlatform.BusinessLayer.MessageQuote.Time
  name: Time
  nameWithType: MessageQuote.Time
  fullName: TradingPlatform.BusinessLayer.MessageQuote.Time
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: TradingPlatform.BusinessLayer.MessageQuote.#ctor*
  commentId: Overload:TradingPlatform.BusinessLayer.MessageQuote.#ctor
  name: MessageQuote
  nameWithType: MessageQuote.MessageQuote
  fullName: TradingPlatform.BusinessLayer.MessageQuote.MessageQuote
