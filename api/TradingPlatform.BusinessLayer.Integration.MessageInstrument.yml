### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  commentId: T:TradingPlatform.BusinessLayer.Integration.MessageInstrument
  id: MessageInstrument
  parent: TradingPlatform.BusinessLayer.Integration
  children:
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor(System.String)
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
  - TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
  langs:
  - csharp
  - vb
  name: MessageInstrument
  nameWithType: MessageInstrument
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: MessageInstrument
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 10
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataContract(Name = "Instrument", Namespace = "TradingPlatform")]

      public sealed class MessageInstrument : Message, IXElementSerialization
    content.vb: >-
      <DataContract(Name:="Instrument", Namespace:="TradingPlatform")>

      Public NotInheritable Class MessageInstrument
          Inherits Message
          Implements IXElementSerialization
  inheritance:
  - System.Object
  - TradingPlatform.BusinessLayer.Integration.Message
  implements:
  - TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Instrument
    - name: Namespace
      type: System.String
      value: TradingPlatform
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
  id: Type
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: MessageInstrument.Type
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: Type
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 13
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public override MessageType Type { get; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.Integration.MessageType
    content.vb: Public Overrides ReadOnly Property Type As MessageType
  overridden: TradingPlatform.BusinessLayer.Integration.Message.Type
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
  id: Id
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: MessageInstrument.Id
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: Id
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 15
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "id")]

      public string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="id")>

      Public ReadOnly Property Id As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
  id: Symbol
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: Symbol
  nameWithType: MessageInstrument.Symbol
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: Symbol
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 18
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "name")]

      public string Symbol { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="name")>

      Public Property Symbol As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
  id: Description
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: MessageInstrument.Description
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: Description
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 21
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "description")]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="description")>

      Public Property Description As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: description
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
  id: InstrumentType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: InstrumentType
  nameWithType: MessageInstrument.InstrumentType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: InstrumentType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 24
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "type")]

      public InstrumentType InstrumentType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.InstrumentType
    content.vb: >-
      <DataMember(Name:="type")>

      Public Property InstrumentType As InstrumentType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: type
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
  id: ProductAssetId
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: ProductAssetId
  nameWithType: MessageInstrument.ProductAssetId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: ProductAssetId
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 27
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "productID")]

      public string ProductAssetId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="productID")>

      Public Property ProductAssetId As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: productID
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
  id: QuotingCurrencyAssetID
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: QuotingCurrencyAssetID
  nameWithType: MessageInstrument.QuotingCurrencyAssetID
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: QuotingCurrencyAssetID
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 30
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "quotingCurrencyID")]

      public string QuotingCurrencyAssetID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="quotingCurrencyID")>

      Public Property QuotingCurrencyAssetID As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: quotingCurrencyID
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
  id: ExchangeId
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: ExchangeId
  nameWithType: MessageInstrument.ExchangeId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: ExchangeId
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 33
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "ExchangeId")]

      public int ExchangeId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember(Name:="ExchangeId")>

      Public Property ExchangeId As Integer
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: ExchangeId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
  id: QuoteDelay
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: QuoteDelay
  nameWithType: MessageInstrument.QuoteDelay
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: QuoteDelay
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 36
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "quoteDelay")]

      public TimeSpan QuoteDelay { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember(Name:="quoteDelay")>

      Public Property QuoteDelay As TimeSpan
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: quoteDelay
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
  id: QuotingType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: QuotingType
  nameWithType: MessageInstrument.QuotingType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: QuotingType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 39
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "quotingType")]

      public InstrumentQuotingType QuotingType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.InstrumentQuotingType
    content.vb: >-
      <DataMember(Name:="quotingType")>

      Public Property QuotingType As InstrumentQuotingType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: quotingType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
  id: LotSize
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: LotSize
  nameWithType: MessageInstrument.LotSize
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: LotSize
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 42
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "lotSize")]

      public double LotSize { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <DataMember(Name:="lotSize")>

      Public Property LotSize As Double
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: lotSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
  id: VariableTickList
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: VariableTickList
  nameWithType: MessageInstrument.VariableTickList
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: VariableTickList
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 45
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "variableTickList")]

      public List<VariableTick> VariableTickList { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.VariableTick}
    content.vb: >-
      <DataMember(Name:="variableTickList")>

      Public Property VariableTickList As List(Of VariableTick)
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: variableTickList
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
  id: LotStep
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: LotStep
  nameWithType: MessageInstrument.LotStep
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: LotStep
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 48
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "lotStep")]

      public double LotStep { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <DataMember(Name:="lotStep")>

      Public Property LotStep As Double
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: lotStep
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
  id: MinLot
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: MinLot
  nameWithType: MessageInstrument.MinLot
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: MinLot
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 51
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "minLot")]

      public double MinLot { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <DataMember(Name:="minLot")>

      Public Property MinLot As Double
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: minLot
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
  id: MaxLot
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: MaxLot
  nameWithType: MessageInstrument.MaxLot
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: MaxLot
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 54
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "maxLot")]

      public double MaxLot { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <DataMember(Name:="maxLot")>

      Public Property MaxLot As Double
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: maxLot
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
  id: InstrumentAdditionalInfo
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: InstrumentAdditionalInfo
  nameWithType: MessageInstrument.InstrumentAdditionalInfo
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: InstrumentAdditionalInfo
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 57
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "instrumentAdditionalInfo")]

      public List<InstrumentAdditionalInfoItem> InstrumentAdditionalInfo { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem}
    content.vb: >-
      <DataMember(Name:="instrumentAdditionalInfo")>

      Public Property InstrumentAdditionalInfo As List(Of InstrumentAdditionalInfoItem)
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: instrumentAdditionalInfo
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
  id: NettingType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: NettingType
  nameWithType: MessageInstrument.NettingType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: NettingType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 60
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "nettingType")]

      public NettingType NettingType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.NettingType
    content.vb: >-
      <DataMember(Name:="nettingType")>

      Public Property NettingType As NettingType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: nettingType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
  id: UnderlierName
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: UnderlierName
  nameWithType: MessageInstrument.UnderlierName
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: UnderlierName
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 63
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "underlierName")]

      public string UnderlierName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember(Name:="underlierName")>

      Public Property UnderlierName As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: underlierName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
  id: OptionType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: OptionType
  nameWithType: MessageInstrument.OptionType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: OptionType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 66
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "optionType")]

      public OptionType OptionType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.OptionType
    content.vb: >-
      <DataMember(Name:="optionType")>

      Public Property OptionType As OptionType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: optionType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
  id: StrikePrice
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: StrikePrice
  nameWithType: MessageInstrument.StrikePrice
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: StrikePrice
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 69
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "strikePrice")]

      public double StrikePrice { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <DataMember(Name:="strikePrice")>

      Public Property StrikePrice As Double
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: strikePrice
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
  id: ExpirationDate
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: ExpirationDate
  nameWithType: MessageInstrument.ExpirationDate
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: ExpirationDate
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 72
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "expirationDate")]

      public DateTime ExpirationDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <DataMember(Name:="expirationDate")>

      Public Property ExpirationDate As Date
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: expirationDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
  id: HistoryType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: HistoryType
  nameWithType: MessageInstrument.HistoryType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: HistoryType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 75
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "HistoryType")]

      public HistoryType HistoryType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.HistoryType
    content.vb: >-
      <DataMember(Name:="HistoryType")>

      Public Property HistoryType As HistoryType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: HistoryType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
  id: GroupId
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: GroupId
  nameWithType: MessageInstrument.GroupId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: GroupId
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 77
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public string GroupId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property GroupId As String
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
  id: VolumeType
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: VolumeType
  nameWithType: MessageInstrument.VolumeType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: VolumeType
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 79
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "VolumeType")]

      public InstrumentVolumeType VolumeType { get; set; }
    parameters: []
    return:
      type: TradingPlatform.BusinessLayer.InstrumentVolumeType
    content.vb: >-
      <DataMember(Name:="VolumeType")>

      Public Property VolumeType As InstrumentVolumeType
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: VolumeType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
  id: LastTradingDate
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: LastTradingDate
  nameWithType: MessageInstrument.LastTradingDate
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: LastTradingDate
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 82
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "lastTradingDate")]

      public DateTime LastTradingDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <DataMember(Name:="lastTradingDate")>

      Public Property LastTradingDate As Date
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: lastTradingDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
  id: AllowCalculateRealtimeTicks
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: AllowCalculateRealtimeTicks
  nameWithType: MessageInstrument.AllowCalculateRealtimeTicks
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: AllowCalculateRealtimeTicks
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 86
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "allowCalculateRealtimeTicks")]

      public bool AllowCalculateRealtimeTicks { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(Name:="allowCalculateRealtimeTicks")>

      Public Property AllowCalculateRealtimeTicks As Boolean
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: allowCalculateRealtimeTicks
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
  id: AllowCalculateRealtimeTrades
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: AllowCalculateRealtimeTrades
  nameWithType: MessageInstrument.AllowCalculateRealtimeTrades
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: AllowCalculateRealtimeTrades
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 89
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "allowCalculateRealtimeTrades")]

      public bool AllowCalculateRealtimeTrades { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(Name:="allowCalculateRealtimeTrades")>

      Public Property AllowCalculateRealtimeTrades As Boolean
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: allowCalculateRealtimeTrades
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
  id: AllowCalculateRealtimeVolume
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: AllowCalculateRealtimeVolume
  nameWithType: MessageInstrument.AllowCalculateRealtimeVolume
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: AllowCalculateRealtimeVolume
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 92
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "allowCalculateRealtimeVolume")]

      public bool AllowCalculateRealtimeVolume { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(Name:="allowCalculateRealtimeVolume")>

      Public Property AllowCalculateRealtimeVolume As Boolean
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: allowCalculateRealtimeVolume
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
  commentId: P:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
  id: AllowCalculateRealtimeChange
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: AllowCalculateRealtimeChange
  nameWithType: MessageInstrument.AllowCalculateRealtimeChange
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
  type: Property
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: AllowCalculateRealtimeChange
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 95
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: >-
      [DataMember(Name = "allowCalculateRealtimeChange")]

      public bool AllowCalculateRealtimeChange { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(Name:="allowCalculateRealtimeChange")>

      Public Property AllowCalculateRealtimeChange As Boolean
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: allowCalculateRealtimeChange
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor(System.String)
  commentId: M:TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: MessageInstrument(String)
  nameWithType: MessageInstrument.MessageInstrument(String)
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MessageInstrument(System.String)
  type: Constructor
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: .ctor
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 99
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public MessageInstrument(string instrumentId)
    parameters:
    - id: instrumentId
      type: System.String
    content.vb: Public Sub New(instrumentId As String)
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString
  commentId: M:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString
  id: ToString
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MessageInstrument.ToString()
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: ToString
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 109
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: TradingPlatform.BusinessLayer.Integration.Message.ToString
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement
  commentId: M:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement
  id: ToXElement
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: ToXElement()
  nameWithType: MessageInstrument.ToXElement()
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: ToXElement
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 111
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public XElement ToXElement()
    return:
      type: System.Xml.Linq.XElement
    content.vb: Public Function ToXElement As XElement
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement*
  implements:
  - TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  commentId: M:TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  id: FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  parent: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  langs:
  - csharp
  - vb
  name: FromXElement(XElement, DeserializationInfo)
  nameWithType: MessageInstrument.FromXElement(XElement, DeserializationInfo)
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement(System.Xml.Linq.XElement, TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    id: FromXElement
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/MessageInstrument.cs
    startLine: 152
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Integration
  syntax:
    content: public void FromXElement(XElement element, DeserializationInfo deserializationInfo)
    parameters:
    - id: element
      type: System.Xml.Linq.XElement
    - id: deserializationInfo
      type: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
    content.vb: Public Sub FromXElement(element As XElement, deserializationInfo As DeserializationInfo)
  overload: TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement*
  implements:
  - TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TradingPlatform.BusinessLayer.Integration
  commentId: N:TradingPlatform.BusinessLayer.Integration
  name: TradingPlatform.BusinessLayer.Integration
  nameWithType: TradingPlatform.BusinessLayer.Integration
  fullName: TradingPlatform.BusinessLayer.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TradingPlatform.BusinessLayer.Integration.Message
  commentId: T:TradingPlatform.BusinessLayer.Integration.Message
  parent: TradingPlatform.BusinessLayer.Integration
  name: Message
  nameWithType: Message
  fullName: TradingPlatform.BusinessLayer.Integration.Message
- uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
  commentId: T:TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
  parent: TradingPlatform.BusinessLayer.Serialization
  name: IXElementSerialization
  nameWithType: IXElementSerialization
  fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TradingPlatform.BusinessLayer.Serialization
  commentId: N:TradingPlatform.BusinessLayer.Serialization
  name: TradingPlatform.BusinessLayer.Serialization
  nameWithType: TradingPlatform.BusinessLayer.Serialization
  fullName: TradingPlatform.BusinessLayer.Serialization
- uid: TradingPlatform.BusinessLayer.Integration.Message.Type
  commentId: P:TradingPlatform.BusinessLayer.Integration.Message.Type
  parent: TradingPlatform.BusinessLayer.Integration.Message
  name: Type
  nameWithType: Message.Type
  fullName: TradingPlatform.BusinessLayer.Integration.Message.Type
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
  name: Type
  nameWithType: MessageInstrument.Type
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Type
- uid: TradingPlatform.BusinessLayer.Integration.MessageType
  commentId: T:TradingPlatform.BusinessLayer.Integration.MessageType
  parent: TradingPlatform.BusinessLayer.Integration
  name: MessageType
  nameWithType: MessageType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
  name: Id
  nameWithType: MessageInstrument.Id
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
  name: Symbol
  nameWithType: MessageInstrument.Symbol
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Symbol
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
  name: Description
  nameWithType: MessageInstrument.Description
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.Description
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
  name: InstrumentType
  nameWithType: MessageInstrument.InstrumentType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentType
- uid: TradingPlatform.BusinessLayer.InstrumentType
  commentId: T:TradingPlatform.BusinessLayer.InstrumentType
  parent: TradingPlatform.BusinessLayer
  name: InstrumentType
  nameWithType: InstrumentType
  fullName: TradingPlatform.BusinessLayer.InstrumentType
- uid: TradingPlatform.BusinessLayer
  commentId: N:TradingPlatform.BusinessLayer
  name: TradingPlatform.BusinessLayer
  nameWithType: TradingPlatform.BusinessLayer
  fullName: TradingPlatform.BusinessLayer
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
  name: ProductAssetId
  nameWithType: MessageInstrument.ProductAssetId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ProductAssetId
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
  name: QuotingCurrencyAssetID
  nameWithType: MessageInstrument.QuotingCurrencyAssetID
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingCurrencyAssetID
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
  name: ExchangeId
  nameWithType: MessageInstrument.ExchangeId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExchangeId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
  name: QuoteDelay
  nameWithType: MessageInstrument.QuoteDelay
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuoteDelay
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
  name: QuotingType
  nameWithType: MessageInstrument.QuotingType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.QuotingType
- uid: TradingPlatform.BusinessLayer.InstrumentQuotingType
  commentId: T:TradingPlatform.BusinessLayer.InstrumentQuotingType
  parent: TradingPlatform.BusinessLayer
  name: InstrumentQuotingType
  nameWithType: InstrumentQuotingType
  fullName: TradingPlatform.BusinessLayer.InstrumentQuotingType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
  name: LotSize
  nameWithType: MessageInstrument.LotSize
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotSize
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
  name: VariableTickList
  nameWithType: MessageInstrument.VariableTickList
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VariableTickList
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.VariableTick}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.VariableTick}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<VariableTick>
  nameWithType: List<VariableTick>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.VariableTick>
  nameWithType.vb: List(Of VariableTick)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.VariableTick)
  name.vb: List(Of VariableTick)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.VariableTick
    name: VariableTick
    nameWithType: VariableTick
    fullName: TradingPlatform.BusinessLayer.VariableTick
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.VariableTick
    name: VariableTick
    nameWithType: VariableTick
    fullName: TradingPlatform.BusinessLayer.VariableTick
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
  name: LotStep
  nameWithType: MessageInstrument.LotStep
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LotStep
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
  name: MinLot
  nameWithType: MessageInstrument.MinLot
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MinLot
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
  name: MaxLot
  nameWithType: MessageInstrument.MaxLot
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MaxLot
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
  name: InstrumentAdditionalInfo
  nameWithType: MessageInstrument.InstrumentAdditionalInfo
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.InstrumentAdditionalInfo
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<InstrumentAdditionalInfoItem>
  nameWithType: List<InstrumentAdditionalInfoItem>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem>
  nameWithType.vb: List(Of InstrumentAdditionalInfoItem)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem)
  name.vb: List(Of InstrumentAdditionalInfoItem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem
    name: InstrumentAdditionalInfoItem
    nameWithType: InstrumentAdditionalInfoItem
    fullName: TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem
    name: InstrumentAdditionalInfoItem
    nameWithType: InstrumentAdditionalInfoItem
    fullName: TradingPlatform.BusinessLayer.InstrumentAdditionalInfoItem
  - name: )
    nameWithType: )
    fullName: )
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
  name: NettingType
  nameWithType: MessageInstrument.NettingType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.NettingType
- uid: TradingPlatform.BusinessLayer.NettingType
  commentId: T:TradingPlatform.BusinessLayer.NettingType
  parent: TradingPlatform.BusinessLayer
  name: NettingType
  nameWithType: NettingType
  fullName: TradingPlatform.BusinessLayer.NettingType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
  name: UnderlierName
  nameWithType: MessageInstrument.UnderlierName
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.UnderlierName
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
  name: OptionType
  nameWithType: MessageInstrument.OptionType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.OptionType
- uid: TradingPlatform.BusinessLayer.OptionType
  commentId: T:TradingPlatform.BusinessLayer.OptionType
  parent: TradingPlatform.BusinessLayer
  name: OptionType
  nameWithType: OptionType
  fullName: TradingPlatform.BusinessLayer.OptionType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
  name: StrikePrice
  nameWithType: MessageInstrument.StrikePrice
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.StrikePrice
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
  name: ExpirationDate
  nameWithType: MessageInstrument.ExpirationDate
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ExpirationDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
  name: HistoryType
  nameWithType: MessageInstrument.HistoryType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.HistoryType
- uid: TradingPlatform.BusinessLayer.HistoryType
  commentId: T:TradingPlatform.BusinessLayer.HistoryType
  parent: TradingPlatform.BusinessLayer
  name: HistoryType
  nameWithType: HistoryType
  fullName: TradingPlatform.BusinessLayer.HistoryType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
  name: GroupId
  nameWithType: MessageInstrument.GroupId
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.GroupId
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
  name: VolumeType
  nameWithType: MessageInstrument.VolumeType
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.VolumeType
- uid: TradingPlatform.BusinessLayer.InstrumentVolumeType
  commentId: T:TradingPlatform.BusinessLayer.InstrumentVolumeType
  parent: TradingPlatform.BusinessLayer
  name: InstrumentVolumeType
  nameWithType: InstrumentVolumeType
  fullName: TradingPlatform.BusinessLayer.InstrumentVolumeType
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
  name: LastTradingDate
  nameWithType: MessageInstrument.LastTradingDate
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.LastTradingDate
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
  name: AllowCalculateRealtimeTicks
  nameWithType: MessageInstrument.AllowCalculateRealtimeTicks
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTicks
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
  name: AllowCalculateRealtimeTrades
  nameWithType: MessageInstrument.AllowCalculateRealtimeTrades
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeTrades
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
  name: AllowCalculateRealtimeVolume
  nameWithType: MessageInstrument.AllowCalculateRealtimeVolume
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeVolume
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
  name: AllowCalculateRealtimeChange
  nameWithType: MessageInstrument.AllowCalculateRealtimeChange
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.AllowCalculateRealtimeChange
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.#ctor
  name: MessageInstrument
  nameWithType: MessageInstrument.MessageInstrument
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.MessageInstrument
- uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
  commentId: M:TradingPlatform.BusinessLayer.Integration.Message.ToString
  parent: TradingPlatform.BusinessLayer.Integration.Message
  name: ToString()
  nameWithType: Message.ToString()
  fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString()
  spec.csharp:
  - uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
    name: ToString
    nameWithType: Message.ToString
    fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TradingPlatform.BusinessLayer.Integration.Message.ToString
    name: ToString
    nameWithType: Message.ToString
    fullName: TradingPlatform.BusinessLayer.Integration.Message.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString
  name: ToString
  nameWithType: MessageInstrument.ToString
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToString
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement
  name: ToXElement
  nameWithType: MessageInstrument.ToXElement
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.ToXElement
- uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
  commentId: M:TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
  parent: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
  name: ToXElement()
  nameWithType: IXElementSerialization.ToXElement()
  fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement()
  spec.csharp:
  - uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
    name: ToXElement
    nameWithType: IXElementSerialization.ToXElement
    fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
    name: ToXElement
    nameWithType: IXElementSerialization.ToXElement
    fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement*
  commentId: Overload:TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement
  name: FromXElement
  nameWithType: MessageInstrument.FromXElement
  fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument.FromXElement
- uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  commentId: M:TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  parent: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization
  isExternal: true
  name: FromXElement(XElement, DeserializationInfo)
  nameWithType: IXElementSerialization.FromXElement(XElement, DeserializationInfo)
  fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement, TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
  spec.csharp:
  - uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
    name: FromXElement
    nameWithType: IXElementSerialization.FromXElement
    fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
    name: DeserializationInfo
    nameWithType: DeserializationInfo
    fullName: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)
    name: FromXElement
    nameWithType: IXElementSerialization.FromXElement
    fullName: TradingPlatform.BusinessLayer.Serialization.IXElementSerialization.FromXElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
    name: DeserializationInfo
    nameWithType: DeserializationInfo
    fullName: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
  commentId: T:TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
  parent: TradingPlatform.BusinessLayer.Serialization
  name: DeserializationInfo
  nameWithType: DeserializationInfo
  fullName: TradingPlatform.BusinessLayer.Serialization.DeserializationInfo
