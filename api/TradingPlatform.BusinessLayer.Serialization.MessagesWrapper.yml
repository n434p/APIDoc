### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  commentId: T:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  id: MessagesWrapper
  parent: TradingPlatform.BusinessLayer.Serialization
  children:
  - TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Accounts
  - TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Assets
  - TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Exchanges
  - TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Instruments
  - TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Rules
  langs:
  - csharp
  - vb
  name: MessagesWrapper
  nameWithType: MessagesWrapper
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: MessagesWrapper
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 422
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataContract(Name = "Data", Namespace = "TradingPlatform")]

      public class MessagesWrapper
    content.vb: >-
      <DataContract(Name:="Data", Namespace:="TradingPlatform")>

      Public Class MessagesWrapper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Data
    - name: Namespace
      type: System.String
      value: TradingPlatform
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Instruments
  commentId: F:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Instruments
  id: Instruments
  parent: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  langs:
  - csharp
  - vb
  name: Instruments
  nameWithType: MessagesWrapper.Instruments
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Instruments
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: Instruments
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 426
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataMember]

      public List<MessageInstrument> Instruments
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageInstrument}
    content.vb: >-
      <DataMember>

      Public Instruments As List(Of MessageInstrument)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Accounts
  commentId: F:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Accounts
  id: Accounts
  parent: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  langs:
  - csharp
  - vb
  name: Accounts
  nameWithType: MessagesWrapper.Accounts
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Accounts
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: Accounts
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 428
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataMember]

      public List<MessageAccount> Accounts
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAccount}
    content.vb: >-
      <DataMember>

      Public Accounts As List(Of MessageAccount)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Assets
  commentId: F:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Assets
  id: Assets
  parent: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  langs:
  - csharp
  - vb
  name: Assets
  nameWithType: MessagesWrapper.Assets
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Assets
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: Assets
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 430
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataMember]

      public List<MessageAsset> Assets
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAsset}
    content.vb: >-
      <DataMember>

      Public Assets As List(Of MessageAsset)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Rules
  commentId: F:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Rules
  id: Rules
  parent: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  langs:
  - csharp
  - vb
  name: Rules
  nameWithType: MessagesWrapper.Rules
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Rules
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: Rules
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 432
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataMember]

      public List<MessageRule> Rules
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageRule}
    content.vb: >-
      <DataMember>

      Public Rules As List(Of MessageRule)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Exchanges
  commentId: F:TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Exchanges
  id: Exchanges
  parent: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper
  langs:
  - csharp
  - vb
  name: Exchanges
  nameWithType: MessagesWrapper.Exchanges
  fullName: TradingPlatform.BusinessLayer.Serialization.MessagesWrapper.Exchanges
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    id: Exchanges
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/Integration/Messages/Serializer.cs
    startLine: 434
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.Serialization
  syntax:
    content: >-
      [DataMember]

      public List<MessageExchange> Exchanges
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageExchange}
    content.vb: >-
      <DataMember>

      Public Exchanges As List(Of MessageExchange)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TradingPlatform.BusinessLayer.Serialization
  commentId: N:TradingPlatform.BusinessLayer.Serialization
  name: TradingPlatform.BusinessLayer.Serialization
  nameWithType: TradingPlatform.BusinessLayer.Serialization
  fullName: TradingPlatform.BusinessLayer.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageInstrument}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageInstrument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MessageInstrument>
  nameWithType: List<MessageInstrument>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.Integration.MessageInstrument>
  nameWithType.vb: List(Of MessageInstrument)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.Integration.MessageInstrument)
  name.vb: List(Of MessageInstrument)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument
    name: MessageInstrument
    nameWithType: MessageInstrument
    fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.Integration.MessageInstrument
    name: MessageInstrument
    nameWithType: MessageInstrument
    fullName: TradingPlatform.BusinessLayer.Integration.MessageInstrument
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAccount}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAccount}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MessageAccount>
  nameWithType: List<MessageAccount>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.Integration.MessageAccount>
  nameWithType.vb: List(Of MessageAccount)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.Integration.MessageAccount)
  name.vb: List(Of MessageAccount)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.Integration.MessageAccount
    name: MessageAccount
    nameWithType: MessageAccount
    fullName: TradingPlatform.BusinessLayer.Integration.MessageAccount
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.Integration.MessageAccount
    name: MessageAccount
    nameWithType: MessageAccount
    fullName: TradingPlatform.BusinessLayer.Integration.MessageAccount
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAsset}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageAsset}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MessageAsset>
  nameWithType: List<MessageAsset>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.Integration.MessageAsset>
  nameWithType.vb: List(Of MessageAsset)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.Integration.MessageAsset)
  name.vb: List(Of MessageAsset)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.Integration.MessageAsset
    name: MessageAsset
    nameWithType: MessageAsset
    fullName: TradingPlatform.BusinessLayer.Integration.MessageAsset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.Integration.MessageAsset
    name: MessageAsset
    nameWithType: MessageAsset
    fullName: TradingPlatform.BusinessLayer.Integration.MessageAsset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageRule}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MessageRule>
  nameWithType: List<MessageRule>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.Integration.MessageRule>
  nameWithType.vb: List(Of MessageRule)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.Integration.MessageRule)
  name.vb: List(Of MessageRule)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.Integration.MessageRule
    name: MessageRule
    nameWithType: MessageRule
    fullName: TradingPlatform.BusinessLayer.Integration.MessageRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.Integration.MessageRule
    name: MessageRule
    nameWithType: MessageRule
    fullName: TradingPlatform.BusinessLayer.Integration.MessageRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageExchange}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.Integration.MessageExchange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MessageExchange>
  nameWithType: List<MessageExchange>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.Integration.MessageExchange>
  nameWithType.vb: List(Of MessageExchange)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.Integration.MessageExchange)
  name.vb: List(Of MessageExchange)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.Integration.MessageExchange
    name: MessageExchange
    nameWithType: MessageExchange
    fullName: TradingPlatform.BusinessLayer.Integration.MessageExchange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.Integration.MessageExchange
    name: MessageExchange
    nameWithType: MessageExchange
    fullName: TradingPlatform.BusinessLayer.Integration.MessageExchange
  - name: )
    nameWithType: )
    fullName: )
