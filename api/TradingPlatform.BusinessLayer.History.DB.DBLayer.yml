### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer
  commentId: T:TradingPlatform.BusinessLayer.History.DB.DBLayer
  id: DBLayer
  parent: TradingPlatform.BusinessLayer.History.DB
  children:
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect(System.String)
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters,System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}@)
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory(TradingPlatform.BusinessLayer.HistoryHolder)
  - TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction
  langs:
  - csharp
  - vb
  name: DBLayer
  nameWithType: DBLayer
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: DBLayer
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 10
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public class DBLayer
    content.vb: Public Class DBLayer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor
  id: '#ctor'
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: DBLayer()
  nameWithType: DBLayer.DBLayer()
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.DBLayer()
  type: Constructor
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: .ctor
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 24
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public DBLayer()
    content.vb: Public Sub New
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters,System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}@)
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters,System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}@)
  id: ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters,System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}@)
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: ReceiveHistory(HistoryRequestParameters, out List<HistoryRequestParameters>)
  nameWithType: DBLayer.ReceiveHistory(HistoryRequestParameters, out List<HistoryRequestParameters>)
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters, out System.Collections.Generic.List<TradingPlatform.BusinessLayer.HistoryRequestParameters>)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: ReceiveHistory
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 26
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public IList<IHistoryItem> ReceiveHistory(HistoryRequestParameters historyRequestParameters, out List<HistoryRequestParameters> historyParametersForServerRequest)
    parameters:
    - id: historyRequestParameters
      type: TradingPlatform.BusinessLayer.HistoryRequestParameters
    - id: historyParametersForServerRequest
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}
    return:
      type: System.Collections.Generic.IList{TradingPlatform.BusinessLayer.IHistoryItem}
    content.vb: Public Function ReceiveHistory(historyRequestParameters As HistoryRequestParameters, ByRef historyParametersForServerRequest As List(Of HistoryRequestParameters)) As IList(Of IHistoryItem)
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory*
  nameWithType.vb: DBLayer.ReceiveHistory(HistoryRequestParameters, ByRef List(Of HistoryRequestParameters))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters, ByRef System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.HistoryRequestParameters))
  name.vb: ReceiveHistory(HistoryRequestParameters, ByRef List(Of HistoryRequestParameters))
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory(TradingPlatform.BusinessLayer.HistoryHolder)
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory(TradingPlatform.BusinessLayer.HistoryHolder)
  id: RecordHistory(TradingPlatform.BusinessLayer.HistoryHolder)
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: RecordHistory(HistoryHolder)
  nameWithType: DBLayer.RecordHistory(HistoryHolder)
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory(TradingPlatform.BusinessLayer.HistoryHolder)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: RecordHistory
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 63
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public void RecordHistory(HistoryHolder historyHolder)
    parameters:
    - id: historyHolder
      type: TradingPlatform.BusinessLayer.HistoryHolder
    content.vb: Public Sub RecordHistory(historyHolder As HistoryHolder)
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect(System.String)
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect(System.String)
  id: Connect(System.String)
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: Connect(String)
  nameWithType: DBLayer.Connect(String)
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect(System.String)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: Connect
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 94
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public void Connect(string address)
    parameters:
    - id: address
      type: System.String
    content.vb: Public Sub Connect(address As String)
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect
  id: Disconnect
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: Disconnect()
  nameWithType: DBLayer.Disconnect()
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: Disconnect
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 121
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public void Disconnect()
    content.vb: Public Sub Disconnect
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction
  commentId: M:TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction
  id: WaitForFinishAllTransaction
  parent: TradingPlatform.BusinessLayer.History.DB.DBLayer
  langs:
  - csharp
  - vb
  name: WaitForFinishAllTransaction()
  nameWithType: DBLayer.WaitForFinishAllTransaction()
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction()
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    id: WaitForFinishAllTransaction
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/History/DB/DBLayer.cs
    startLine: 146
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer.History.DB
  syntax:
    content: public void WaitForFinishAllTransaction()
    content.vb: Public Sub WaitForFinishAllTransaction
  overload: TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TradingPlatform.BusinessLayer.History.DB
  commentId: N:TradingPlatform.BusinessLayer.History.DB
  name: TradingPlatform.BusinessLayer.History.DB
  nameWithType: TradingPlatform.BusinessLayer.History.DB
  fullName: TradingPlatform.BusinessLayer.History.DB
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.#ctor
  name: DBLayer
  nameWithType: DBLayer.DBLayer
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.DBLayer
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory
  name: ReceiveHistory
  nameWithType: DBLayer.ReceiveHistory
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.ReceiveHistory
- uid: TradingPlatform.BusinessLayer.HistoryRequestParameters
  commentId: T:TradingPlatform.BusinessLayer.HistoryRequestParameters
  parent: TradingPlatform.BusinessLayer
  name: HistoryRequestParameters
  nameWithType: HistoryRequestParameters
  fullName: TradingPlatform.BusinessLayer.HistoryRequestParameters
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.HistoryRequestParameters}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<HistoryRequestParameters>
  nameWithType: List<HistoryRequestParameters>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.HistoryRequestParameters>
  nameWithType.vb: List(Of HistoryRequestParameters)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.HistoryRequestParameters)
  name.vb: List(Of HistoryRequestParameters)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.HistoryRequestParameters
    name: HistoryRequestParameters
    nameWithType: HistoryRequestParameters
    fullName: TradingPlatform.BusinessLayer.HistoryRequestParameters
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.HistoryRequestParameters
    name: HistoryRequestParameters
    nameWithType: HistoryRequestParameters
    fullName: TradingPlatform.BusinessLayer.HistoryRequestParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{TradingPlatform.BusinessLayer.IHistoryItem}
  commentId: T:System.Collections.Generic.IList{TradingPlatform.BusinessLayer.IHistoryItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IHistoryItem>
  nameWithType: IList<IHistoryItem>
  fullName: System.Collections.Generic.IList<TradingPlatform.BusinessLayer.IHistoryItem>
  nameWithType.vb: IList(Of IHistoryItem)
  fullName.vb: System.Collections.Generic.IList(Of TradingPlatform.BusinessLayer.IHistoryItem)
  name.vb: IList(Of IHistoryItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.IHistoryItem
    name: IHistoryItem
    nameWithType: IHistoryItem
    fullName: TradingPlatform.BusinessLayer.IHistoryItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.IHistoryItem
    name: IHistoryItem
    nameWithType: IHistoryItem
    fullName: TradingPlatform.BusinessLayer.IHistoryItem
  - name: )
    nameWithType: )
    fullName: )
- uid: TradingPlatform.BusinessLayer
  commentId: N:TradingPlatform.BusinessLayer
  name: TradingPlatform.BusinessLayer
  nameWithType: TradingPlatform.BusinessLayer
  fullName: TradingPlatform.BusinessLayer
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory
  name: RecordHistory
  nameWithType: DBLayer.RecordHistory
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.RecordHistory
- uid: TradingPlatform.BusinessLayer.HistoryHolder
  commentId: T:TradingPlatform.BusinessLayer.HistoryHolder
  parent: TradingPlatform.BusinessLayer
  name: HistoryHolder
  nameWithType: HistoryHolder
  fullName: TradingPlatform.BusinessLayer.HistoryHolder
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect
  name: Connect
  nameWithType: DBLayer.Connect
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.Connect
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect
  name: Disconnect
  nameWithType: DBLayer.Disconnect
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.Disconnect
- uid: TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction*
  commentId: Overload:TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction
  name: WaitForFinishAllTransaction
  nameWithType: DBLayer.WaitForFinishAllTransaction
  fullName: TradingPlatform.BusinessLayer.History.DB.DBLayer.WaitForFinishAllTransaction
