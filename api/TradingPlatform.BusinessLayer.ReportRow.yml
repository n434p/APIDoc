### YamlMime:ManagedReference
items:
- uid: TradingPlatform.BusinessLayer.ReportRow
  commentId: T:TradingPlatform.BusinessLayer.ReportRow
  id: ReportRow
  parent: TradingPlatform.BusinessLayer
  children:
  - TradingPlatform.BusinessLayer.ReportRow.#ctor
  - TradingPlatform.BusinessLayer.ReportRow.AddCell(System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  - TradingPlatform.BusinessLayer.ReportRow.AddCell(System.String,System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  - TradingPlatform.BusinessLayer.ReportRow.Cells
  langs:
  - csharp
  - vb
  name: ReportRow
  nameWithType: ReportRow
  fullName: TradingPlatform.BusinessLayer.ReportRow
  type: Class
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    id: ReportRow
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    startLine: 10
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nExposes report row decoration\n"
  example: []
  syntax:
    content: public class ReportRow
    content.vb: Public Class ReportRow
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TradingPlatform.BusinessLayer.ReportRow.Cells
  commentId: F:TradingPlatform.BusinessLayer.ReportRow.Cells
  id: Cells
  parent: TradingPlatform.BusinessLayer.ReportRow
  langs:
  - csharp
  - vb
  name: Cells
  nameWithType: ReportRow.Cells
  fullName: TradingPlatform.BusinessLayer.ReportRow.Cells
  type: Field
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    id: Cells
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    startLine: 15
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nA collection of cells\n"
  example: []
  syntax:
    content: public List<ReportCell> Cells
    return:
      type: System.Collections.Generic.List{TradingPlatform.BusinessLayer.ReportCell}
    content.vb: Public Cells As List(Of ReportCell)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.ReportRow.#ctor
  commentId: M:TradingPlatform.BusinessLayer.ReportRow.#ctor
  id: '#ctor'
  parent: TradingPlatform.BusinessLayer.ReportRow
  langs:
  - csharp
  - vb
  name: ReportRow()
  nameWithType: ReportRow.ReportRow()
  fullName: TradingPlatform.BusinessLayer.ReportRow.ReportRow()
  type: Constructor
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    id: .ctor
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    startLine: 20
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nInitializes cells in the row\n"
  example: []
  syntax:
    content: public ReportRow()
    content.vb: Public Sub New
  overload: TradingPlatform.BusinessLayer.ReportRow.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.ReportRow.AddCell(System.String,System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  commentId: M:TradingPlatform.BusinessLayer.ReportRow.AddCell(System.String,System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  id: AddCell(System.String,System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  parent: TradingPlatform.BusinessLayer.ReportRow
  langs:
  - csharp
  - vb
  name: AddCell(String, Object, FormattingDescription)
  nameWithType: ReportRow.AddCell(String, Object, FormattingDescription)
  fullName: TradingPlatform.BusinessLayer.ReportRow.AddCell(System.String, System.Object, TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    id: AddCell
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    startLine: 27
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nAdds cells to the row by label and value\n"
  example: []
  syntax:
    content: public void AddCell(string label, object value, FormattingDescription formattingDescription = null)
    parameters:
    - id: label
      type: System.String
    - id: value
      type: System.Object
    - id: formattingDescription
      type: TradingPlatform.BusinessLayer.Integration.FormattingDescription
    content.vb: Public Sub AddCell(label As String, value As Object, formattingDescription As FormattingDescription = Nothing)
  overload: TradingPlatform.BusinessLayer.ReportRow.AddCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TradingPlatform.BusinessLayer.ReportRow.AddCell(System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  commentId: M:TradingPlatform.BusinessLayer.ReportRow.AddCell(System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  id: AddCell(System.Object,TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  parent: TradingPlatform.BusinessLayer.ReportRow
  langs:
  - csharp
  - vb
  name: AddCell(Object, FormattingDescription)
  nameWithType: ReportRow.AddCell(Object, FormattingDescription)
  fullName: TradingPlatform.BusinessLayer.ReportRow.AddCell(System.Object, TradingPlatform.BusinessLayer.Integration.FormattingDescription)
  type: Method
  source:
    remote:
      path: C:/Quantower/development/BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    id: AddCell
    path: ../BusinessLayer/TradingPlatform.BusinessLayer/BusinessObjects/Reports/ReportRow.cs
    startLine: 34
  assemblies:
  - TradingPlatform.BusinessLayer
  namespace: TradingPlatform.BusinessLayer
  summary: "\nAdds cells to the row by value only\n"
  example: []
  syntax:
    content: public void AddCell(object value, FormattingDescription formattingDescription = null)
    parameters:
    - id: value
      type: System.Object
    - id: formattingDescription
      type: TradingPlatform.BusinessLayer.Integration.FormattingDescription
    content.vb: Public Sub AddCell(value As Object, formattingDescription As FormattingDescription = Nothing)
  overload: TradingPlatform.BusinessLayer.ReportRow.AddCell*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TradingPlatform.BusinessLayer
  commentId: N:TradingPlatform.BusinessLayer
  name: TradingPlatform.BusinessLayer
  nameWithType: TradingPlatform.BusinessLayer
  fullName: TradingPlatform.BusinessLayer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{TradingPlatform.BusinessLayer.ReportCell}
  commentId: T:System.Collections.Generic.List{TradingPlatform.BusinessLayer.ReportCell}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ReportCell>
  nameWithType: List<ReportCell>
  fullName: System.Collections.Generic.List<TradingPlatform.BusinessLayer.ReportCell>
  nameWithType.vb: List(Of ReportCell)
  fullName.vb: System.Collections.Generic.List(Of TradingPlatform.BusinessLayer.ReportCell)
  name.vb: List(Of ReportCell)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TradingPlatform.BusinessLayer.ReportCell
    name: ReportCell
    nameWithType: ReportCell
    fullName: TradingPlatform.BusinessLayer.ReportCell
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TradingPlatform.BusinessLayer.ReportCell
    name: ReportCell
    nameWithType: ReportCell
    fullName: TradingPlatform.BusinessLayer.ReportCell
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TradingPlatform.BusinessLayer.ReportRow.#ctor*
  commentId: Overload:TradingPlatform.BusinessLayer.ReportRow.#ctor
  name: ReportRow
  nameWithType: ReportRow.ReportRow
  fullName: TradingPlatform.BusinessLayer.ReportRow.ReportRow
- uid: TradingPlatform.BusinessLayer.ReportRow.AddCell*
  commentId: Overload:TradingPlatform.BusinessLayer.ReportRow.AddCell
  name: AddCell
  nameWithType: ReportRow.AddCell
  fullName: TradingPlatform.BusinessLayer.ReportRow.AddCell
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TradingPlatform.BusinessLayer.Integration.FormattingDescription
  commentId: T:TradingPlatform.BusinessLayer.Integration.FormattingDescription
  parent: TradingPlatform.BusinessLayer.Integration
  name: FormattingDescription
  nameWithType: FormattingDescription
  fullName: TradingPlatform.BusinessLayer.Integration.FormattingDescription
- uid: TradingPlatform.BusinessLayer.Integration
  commentId: N:TradingPlatform.BusinessLayer.Integration
  name: TradingPlatform.BusinessLayer.Integration
  nameWithType: TradingPlatform.BusinessLayer.Integration
  fullName: TradingPlatform.BusinessLayer.Integration
